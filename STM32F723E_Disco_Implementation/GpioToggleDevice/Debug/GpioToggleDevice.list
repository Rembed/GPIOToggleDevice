
GpioToggleDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003668  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003868  08003868  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  0800387c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800387c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009121  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019e0  00000000  00000000  0002915d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  0002ab40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021681  00000000  00000000  0002ba88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000082ee  00000000  00000000  0004d109  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfd90  00000000  00000000  000553f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee0  00000000  00000000  00125204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003830 	.word	0x08003830

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08003830 	.word	0x08003830

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CommandParser_init>:
void CommandParser_init(
		struct CommandParser* this,
		struct Fifo* _fifo,
		uint8_t _syncByte1,
		uint8_t _syncByte2)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	4611      	mov	r1, r2
 800052c:	461a      	mov	r2, r3
 800052e:	460b      	mov	r3, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	this->m_fifo = _fifo;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
	this->m_syncByte1 = _syncByte1;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	711a      	strb	r2, [r3, #4]
	this->m_syncByte2 = _syncByte2;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	715a      	strb	r2, [r3, #5]

	this->m_syncByte1Flag = 0;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2200      	movs	r2, #0
 800054c:	719a      	strb	r2, [r3, #6]
	this->m_syncByte2Flag = 0;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	71da      	strb	r2, [r3, #7]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <CommandParser_getCommand>:


uint8_t CommandParser_getCommand(
		struct CommandParser* this)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	if(!Fifo_isEmpty(this->m_fifo))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f89e 	bl	80006ae <Fifo_isEmpty>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d13c      	bne.n	80005f2 <CommandParser_getCommand+0x92>
	{
		byte = Fifo_pop(this->m_fifo);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f875 	bl	800066c <Fifo_pop>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

		if(byte == this->m_syncByte1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	429a      	cmp	r2, r3
 800058e:	d107      	bne.n	80005a0 <CommandParser_getCommand+0x40>
				&& !this->m_syncByte1Flag)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d103      	bne.n	80005a0 <CommandParser_getCommand+0x40>
		{
			this->m_syncByte1Flag = 1;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	719a      	strb	r2, [r3, #6]
 800059e:	e026      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(byte == this->m_syncByte2
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10b      	bne.n	80005c2 <CommandParser_getCommand+0x62>
				&& this->m_syncByte1Flag
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d007      	beq.n	80005c2 <CommandParser_getCommand+0x62>
				&& !this->m_syncByte2Flag)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	79db      	ldrb	r3, [r3, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <CommandParser_getCommand+0x62>
		{
			this->m_syncByte2Flag = 1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	71da      	strb	r2, [r3, #7]
 80005c0:	e015      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(this->m_syncByte1Flag && this->m_syncByte2Flag)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00b      	beq.n	80005e2 <CommandParser_getCommand+0x82>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <CommandParser_getCommand+0x82>
		{
			this->m_syncByte1Flag = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	71da      	strb	r2, [r3, #7]
			return byte;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	e007      	b.n	80005f2 <CommandParser_getCommand+0x92>
		}

		else
		{
			this->m_syncByte1Flag = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	71da      	strb	r2, [r3, #7]
		}

		return 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e7ff      	b.n	80005f2 <CommandParser_getCommand+0x92>
	}
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Fifo_init>:

void Fifo_init(
		struct Fifo* this,
		uint8_t* _buffer,
		uint8_t _bufferLength)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	4613      	mov	r3, r2
 8000606:	71fb      	strb	r3, [r7, #7]
	this->m_buffer = _buffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	601a      	str	r2, [r3, #0]
	this->m_bufferLength = _bufferLength;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	711a      	strb	r2, [r3, #4]
	this->m_head = 0;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
	this->m_tail = 0;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2200      	movs	r2, #0
 800061e:	719a      	strb	r2, [r3, #6]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <Fifo_push>:

void Fifo_push(
		struct Fifo* this,
		uint8_t _byte)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	this->m_buffer[this->m_head] = _byte;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7952      	ldrb	r2, [r2, #5]
 8000640:	4413      	add	r3, r2
 8000642:	78fa      	ldrb	r2, [r7, #3]
 8000644:	701a      	strb	r2, [r3, #0]

	this->m_head = (this->m_head + 1) % this->m_bufferLength;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	795b      	ldrb	r3, [r3, #5]
 800064a:	3301      	adds	r3, #1
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7912      	ldrb	r2, [r2, #4]
 8000650:	fb93 f1f2 	sdiv	r1, r3, r2
 8000654:	fb02 f201 	mul.w	r2, r2, r1
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	715a      	strb	r2, [r3, #5]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <Fifo_pop>:

uint8_t Fifo_pop(
		struct Fifo* this)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	uint8_t retByte = 0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

	retByte = this->m_buffer[this->m_tail];
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	73fb      	strb	r3, [r7, #15]
	this->m_tail = (this->m_tail + 1) % this->m_bufferLength;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	799b      	ldrb	r3, [r3, #6]
 800068a:	3301      	adds	r3, #1
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	fb93 f1f2 	sdiv	r1, r3, r2
 8000694:	fb02 f201 	mul.w	r2, r2, r1
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	719a      	strb	r2, [r3, #6]

	return retByte;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <Fifo_isEmpty>:

uint8_t Fifo_isEmpty(
		struct Fifo* this)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return this->m_head == this->m_tail;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795a      	ldrb	r2, [r3, #5]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	429a      	cmp	r2, r3
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <MX_GPIO_Init>:
     PE15   ------> FMC_D12_DA12
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ea:	4bb2      	ldr	r3, [pc, #712]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4ab1      	ldr	r2, [pc, #708]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4baf      	ldr	r3, [pc, #700]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	623b      	str	r3, [r7, #32]
 8000700:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4bac      	ldr	r3, [pc, #688]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aab      	ldr	r2, [pc, #684]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4ba9      	ldr	r3, [pc, #676]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4ba6      	ldr	r3, [pc, #664]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4aa5      	ldr	r2, [pc, #660]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4ba3      	ldr	r3, [pc, #652]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4ba0      	ldr	r3, [pc, #640]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a9f      	ldr	r2, [pc, #636]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9d      	ldr	r3, [pc, #628]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b9a      	ldr	r3, [pc, #616]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a99      	ldr	r2, [pc, #612]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b97      	ldr	r3, [pc, #604]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a93      	ldr	r2, [pc, #588]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b91      	ldr	r3, [pc, #580]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800077a:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a8d      	ldr	r2, [pc, #564]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b8b      	ldr	r3, [pc, #556]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b88      	ldr	r3, [pc, #544]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a87      	ldr	r2, [pc, #540]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b85      	ldr	r3, [pc, #532]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b82      	ldr	r3, [pc, #520]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a81      	ldr	r2, [pc, #516]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2118      	movs	r1, #24
 80007c6:	487c      	ldr	r0, [pc, #496]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 f8bc 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 41e2 	mov.w	r1, #28928	; 0x7100
 80007d2:	487a      	ldr	r0, [pc, #488]	; (80009bc <MX_GPIO_Init+0x2e8>)
 80007d4:	f001 f8b6 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2148      	movs	r1, #72	; 0x48
 80007dc:	4878      	ldr	r0, [pc, #480]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 80007de:	f001 f8b1 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80007e8:	4876      	ldr	r0, [pc, #472]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 80007ea:	f001 f8ab 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f240 410c 	movw	r1, #1036	; 0x40c
 80007f4:	4874      	ldr	r0, [pc, #464]	; (80009c8 <MX_GPIO_Init+0x2f4>)
 80007f6:	f001 f8a5 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMOD_SEL_0_GPIO_Port, PMOD_SEL_0_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000800:	4872      	ldr	r0, [pc, #456]	; (80009cc <MX_GPIO_Init+0x2f8>)
 8000802:	f001 f89f 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800080c:	4870      	ldr	r0, [pc, #448]	; (80009d0 <MX_GPIO_Init+0x2fc>)
 800080e:	f001 f899 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PMOD_GPIO_1_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin|CTP_RST_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f241 218c 	movw	r1, #4748	; 0x128c
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2f8>)
 800081a:	f001 f893 	bl	8001944 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f241 0102 	movw	r1, #4098	; 0x1002
 8000824:	486b      	ldr	r0, [pc, #428]	; (80009d4 <MX_GPIO_Init+0x300>)
 8000826:	f001 f88d 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ARD_D7_GPIO_Pin|ARD_D8_GPIO_Pin;
 800082a:	2318      	movs	r3, #24
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	485d      	ldr	r0, [pc, #372]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 8000842:	f000 fee5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000846:	2304      	movs	r3, #4
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000856:	2309      	movs	r3, #9
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4855      	ldr	r0, [pc, #340]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 8000862:	f000 fed5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PSRAM_NBL1_Pin|PSRAM_NBL0_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D5_Pin
 8000866:	f64f 7383 	movw	r3, #65411	; 0xff83
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_D6_Pin|LCD_PSRAM_D8_Pin|LCD_PSRAM_D11_Pin|LCD_PSRAM_D4_Pin
                          |LCD_PSRAM_D7_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000878:	230c      	movs	r3, #12
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	484d      	ldr	r0, [pc, #308]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 8000884:	f000 fec4 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SAI2_I2C1_SCL_Pin|SAI2_I2C1_SDA_Pin;
 8000888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088e:	2312      	movs	r3, #18
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089a:	2304      	movs	r3, #4
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	484b      	ldr	r0, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x300>)
 80008a6:	f000 feb3 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D11_TIM3_CH2_SPI1_MOSI_Pin|ARD_D12_SPI1_MISO_Pin;
 80008aa:	2330      	movs	r3, #48	; 0x30
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ba:	2305      	movs	r3, #5
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4843      	ldr	r0, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x300>)
 80008c6:	f000 fea3 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|WIFI_GPIO_0_Pin|PMOD_GPIO_0_Pin|USB_OTGFS_PPWR_EN_Pin;
 80008ca:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4836      	ldr	r0, [pc, #216]	; (80009bc <MX_GPIO_Init+0x2e8>)
 80008e4:	f000 fe94 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PSRAM_NE1_Pin|LCD_PSRAM_D2_Pin|LCD_PSRAM_NWE_Pin|LCD_PSRAM_D3_Pin
 80008e8:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_PSRAM_NWED4_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|LCD_PSRAM_D15_Pin|LCD_PSRAM_D14_Pin|LCD_PSRAM_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008fa:	230c      	movs	r3, #12
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	482e      	ldr	r0, [pc, #184]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 8000906:	f000 fe83 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_TXD_WIFI_RX_Pin;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800091c:	2308      	movs	r3, #8
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_TXD_WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4827      	ldr	r0, [pc, #156]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 8000928:	f000 fe72 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STMOD_TIM2_CH1_2_ETR_Pin|ARD_D10_TIM2_CH2_SPI1_NSS_Pin;
 800092c:	f248 0302 	movw	r3, #32770	; 0x8002
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093e:	2301      	movs	r3, #1
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x2fc>)
 800094a:	f000 fe61 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ARD_D3_TIM9_CH1_Pin|ARD_D6_TIM9_CH2_Pin;
 800094e:	2360      	movs	r3, #96	; 0x60
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800095e:	2303      	movs	r3, #3
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 800096a:	f000 fe51 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NC1_Pin;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800097e:	230c      	movs	r3, #12
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(NC1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <MX_GPIO_Init+0x300>)
 800098a:	f000 fe41 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800099e:	230a      	movs	r3, #10
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <MX_GPIO_Init+0x300>)
 80009aa:	f000 fe31 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_INT_Pin;
 80009ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b2:	e011      	b.n	80009d8 <MX_GPIO_Init+0x304>
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40022000 	.word	0x40022000
 80009cc:	40021c00 	.word	0x40021c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	4bbc      	ldr	r3, [pc, #752]	; (8000ccc <MX_GPIO_Init+0x5f8>)
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAI2_INT_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	48b9      	ldr	r0, [pc, #740]	; (8000cd0 <MX_GPIO_Init+0x5fc>)
 80009ea:	f000 fe11 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SD_B_Pin;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a00:	230a      	movs	r3, #10
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI2_SD_B_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	48b1      	ldr	r0, [pc, #708]	; (8000cd0 <MX_GPIO_Init+0x5fc>)
 8000a0c:	f000 fe00 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_2_Pin|WIFI_CH_PD_Pin;
 8000a10:	2348      	movs	r3, #72	; 0x48
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	48ab      	ldr	r0, [pc, #684]	; (8000cd4 <MX_GPIO_Init+0x600>)
 8000a28:	f000 fdf2 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STMOD_UART4_RXD_s_Pin|ARD_D2_GPIO_Pin;
 8000a2c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	48a4      	ldr	r0, [pc, #656]	; (8000cd8 <MX_GPIO_Init+0x604>)
 8000a46:	f000 fde3 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000a4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	489c      	ldr	r0, [pc, #624]	; (8000cd8 <MX_GPIO_Init+0x604>)
 8000a68:	f000 fdd2 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000a6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7e:	230a      	movs	r3, #10
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4894      	ldr	r0, [pc, #592]	; (8000cdc <MX_GPIO_Init+0x608>)
 8000a8a:	f000 fdc1 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_FS_A_Pin|SAI2_SD_A_Pin|SAI2_SCK_A_Pin|SAI2_MCLK_A_Pin;
 8000a8e:	23f0      	movs	r3, #240	; 0xf0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	488d      	ldr	r0, [pc, #564]	; (8000ce0 <MX_GPIO_Init+0x60c>)
 8000aaa:	f000 fdb1 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_NE_Pin|PSRAM_A15_Pin|PSRAM_A14_Pin|PSRAM_A13_Pin
 8000aae:	f240 233f 	movw	r3, #575	; 0x23f
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4881      	ldr	r0, [pc, #516]	; (8000cd0 <MX_GPIO_Init+0x5fc>)
 8000acc:	f000 fda0 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PI10 */
  GPIO_InitStruct.Pin = PMOD_SPI2_MOSI_Pin|PMOD_SPI2_MISO_Pin|GPIO_PIN_10;
 8000ad0:	f240 430c 	movw	r3, #1036	; 0x40c
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	487d      	ldr	r0, [pc, #500]	; (8000ce0 <MX_GPIO_Init+0x60c>)
 8000aea:	f000 fd91 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	4b75      	ldr	r3, [pc, #468]	; (8000ccc <MX_GPIO_Init+0x5f8>)
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4877      	ldr	r0, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x60c>)
 8000b04:	f000 fd84 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_RXD_WIFI_TX_Pin;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UART_RXD_WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	486c      	ldr	r0, [pc, #432]	; (8000cd4 <MX_GPIO_Init+0x600>)
 8000b24:	f000 fd74 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = PMOD_SEL_0_Pin|PMOD_GPIO_1_Pin|ARD_D4_GPIO_Pin|USB_OTGHS_PPWR_EN_Pin
 8000b28:	f249 238c 	movw	r3, #37516	; 0x928c
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |CTP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4868      	ldr	r0, [pc, #416]	; (8000ce4 <MX_GPIO_Init+0x610>)
 8000b42:	f000 fd65 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin|PMOD_SPI2_NSS_Pin;
 8000b46:	2303      	movs	r3, #3
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b56:	2305      	movs	r3, #5
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	485f      	ldr	r0, [pc, #380]	; (8000ce0 <MX_GPIO_Init+0x60c>)
 8000b62:	f000 fd55 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|SYS_LD_USER1_Pin;
 8000b66:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4857      	ldr	r0, [pc, #348]	; (8000cdc <MX_GPIO_Init+0x608>)
 8000b80:	f000 fd46 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A3_Pin
 8000b84:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A7_Pin|PSRAM_A6_Pin
                          |PSRAM_A9_Pin|PSRAM_A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b96:	230c      	movs	r3, #12
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4851      	ldr	r0, [pc, #324]	; (8000ce8 <MX_GPIO_Init+0x614>)
 8000ba2:	f000 fd35 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = STMOD_UART4_TXD_Pin|STMOD_UART4_RXD_Pin;
 8000ba6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4848      	ldr	r0, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x610>)
 8000bc4:	f000 fd24 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	483f      	ldr	r0, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x608>)
 8000bde:	f000 fd17 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_SCL_Pin;
 8000be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4837      	ldr	r0, [pc, #220]	; (8000cdc <MX_GPIO_Init+0x608>)
 8000c00:	f000 fd06 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_INT_Pin;
 8000c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <MX_GPIO_Init+0x5f8>)
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_INT_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0x604>)
 8000c1a:	f000 fcf9 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D15_STMOD_I2C2_SCL_Pin|ARD_D14_STMOD_I2C2_SDA_Pin;
 8000c1e:	2330      	movs	r3, #48	; 0x30
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0x610>)
 8000c3a:	f000 fce9 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = PMOD_UART7_TXD_Pin|PMOD_UART7_RXD_Pin|PMOD_UART7_CTS_Pin|PMOD_UART7_RTS_Pin;
 8000c3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000c50:	2308      	movs	r3, #8
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <MX_GPIO_Init+0x614>)
 8000c5c:	f000 fcd8 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_ADC3_IN8_Pin;
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_ADC3_IN8_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0x614>)
 8000c76:	f000 fccb 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_GPIO_Init+0x610>)
 8000c98:	f000 fcba 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTGHS_OVCR_INT_Pin;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTGHS_OVCR_INT_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_GPIO_Init+0x610>)
 8000cb2:	f000 fcad 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A5_Pin|ARD_A2_Pin;
 8000cb6:	2313      	movs	r3, #19
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	e010      	b.n	8000cec <MX_GPIO_Init+0x618>
 8000cca:	bf00      	nop
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021800 	.word	0x40021800
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40021c00 	.word	0x40021c00
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	4867      	ldr	r0, [pc, #412]	; (8000e8c <MX_GPIO_Init+0x7b8>)
 8000cee:	f000 fc8f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STMOD_SPI2_MISOs_Pin|STMOD_SPI2_MOSIs_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d02:	2305      	movs	r3, #5
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	485f      	ldr	r0, [pc, #380]	; (8000e8c <MX_GPIO_Init+0x7b8>)
 8000d0e:	f000 fc7f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000d12:	2304      	movs	r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d22:	2309      	movs	r3, #9
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4858      	ldr	r0, [pc, #352]	; (8000e90 <MX_GPIO_Init+0x7bc>)
 8000d2e:	f000 fc6f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D9_TIM12_CH1_Pin;
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d42:	2309      	movs	r3, #9
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_TIM12_CH1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4851      	ldr	r0, [pc, #324]	; (8000e94 <MX_GPIO_Init+0x7c0>)
 8000d4e:	f000 fc5f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_SDA_Pin;
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d64:	2304      	movs	r3, #4
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CTP_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4849      	ldr	r0, [pc, #292]	; (8000e94 <MX_GPIO_Init+0x7c0>)
 8000d70:	f000 fc4e 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d86:	2309      	movs	r3, #9
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4841      	ldr	r0, [pc, #260]	; (8000e98 <MX_GPIO_Init+0x7c4>)
 8000d92:	f000 fc3d 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_USART2_TX_Pin|ARD_D0_USART2_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	483a      	ldr	r0, [pc, #232]	; (8000e9c <MX_GPIO_Init+0x7c8>)
 8000db2:	f000 fc2d 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A0_Pin;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4834      	ldr	r0, [pc, #208]	; (8000e9c <MX_GPIO_Init+0x7c8>)
 8000dca:	f000 fc21 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SPI1_SCK_Pin;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	482c      	ldr	r0, [pc, #176]	; (8000e9c <MX_GPIO_Init+0x7c8>)
 8000dea:	f000 fc11 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USB_OTG_HS_ID_Pin|SYS_LD_USER2_Pin;
 8000dee:	f241 0302 	movw	r3, #4098	; 0x1002
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x7bc>)
 8000e08:	f000 fc02 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USB_OTG_HS_VBUS_Pin|USB_OTGFS_OVCR_INT_Pin|PMOD_INT_Pin;
 8000e0c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_GPIO_Init+0x7cc>)
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481b      	ldr	r0, [pc, #108]	; (8000e90 <MX_GPIO_Init+0x7bc>)
 8000e22:	f000 fbf5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_STMOD_TIM3_CH3_Pin;
 8000e26:	2301      	movs	r3, #1
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e36:	2302      	movs	r3, #2
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_STMOD_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_GPIO_Init+0x7bc>)
 8000e42:	f000 fbe5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_RESET_Pin;
 8000e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0x7d0>)
 8000e5c:	f000 fbd8 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e72:	230c      	movs	r3, #12
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_GPIO_Init+0x7bc>)
 8000e7e:	f000 fbc7 	bl	8001610 <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40021c00 	.word	0x40021c00
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	10110000 	.word	0x10110000
 8000ea4:	40021400 	.word	0x40021400

08000ea8 <main>:
  * @retval int
  */


int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 f9fc 	bl	80012aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f84b 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff fc0d 	bl	80006d4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000eba:	f000 f951 	bl	8001160 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  Fifo_init(&g_fifo, FifoBuffer, 32);
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <main+0x54>)
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <main+0x58>)
 8000ec4:	f7ff fb99 	bl	80005fa <Fifo_init>
  CommandParser_init(&g_commandParser, &g_fifo, 0xA5, 0xC3);
 8000ec8:	23c3      	movs	r3, #195	; 0xc3
 8000eca:	22a5      	movs	r2, #165	; 0xa5
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <main+0x58>)
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <main+0x5c>)
 8000ed0:	f7ff fb26 	bl	8000520 <CommandParser_init>

  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <main+0x60>)
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <main+0x64>)
 8000eda:	f001 fda9 	bl	8002a30 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fa40 	bl	8001364 <HAL_Delay>
	  if(CommandParser_getCommand(&g_commandParser) == 0xB2)
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <main+0x5c>)
 8000ee6:	f7ff fb3b 	bl	8000560 <CommandParser_getCommand>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2bb2      	cmp	r3, #178	; 0xb2
 8000eee:	d1f6      	bne.n	8000ede <main+0x36>
	  {
		  uint8_t i = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
		  i++;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(10);
 8000efa:	e7f0      	b.n	8000ede <main+0x36>
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	2000004c 	.word	0x2000004c
 8000f04:	20000054 	.word	0x20000054
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	2000005c 	.word	0x2000005c

08000f10 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if(huart == &huart6)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_UART_RxCpltCallback+0x30>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10a      	bne.n	8000f36 <HAL_UART_RxCpltCallback+0x26>
	{
		Fifo_push(&g_fifo, byte);
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_UART_RxCpltCallback+0x34>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <HAL_UART_RxCpltCallback+0x38>)
 8000f28:	f7ff fb80 	bl	800062c <Fifo_push>
		HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4905      	ldr	r1, [pc, #20]	; (8000f44 <HAL_UART_RxCpltCallback+0x34>)
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <HAL_UART_RxCpltCallback+0x30>)
 8000f32:	f001 fd7d 	bl	8002a30 <HAL_UART_Receive_IT>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000005c 	.word	0x2000005c
 8000f44:	20000028 	.word	0x20000028
 8000f48:	2000004c 	.word	0x2000004c

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b4      	sub	sp, #208	; 0xd0
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fc60 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fc51 	bl	8003820 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <SystemClock_Config+0x118>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a38      	ldr	r2, [pc, #224]	; (8001064 <SystemClock_Config+0x118>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <SystemClock_Config+0x118>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <SystemClock_Config+0x11c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a33      	ldr	r2, [pc, #204]	; (8001068 <SystemClock_Config+0x11c>)
 8000f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <SystemClock_Config+0x11c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fd2:	23d8      	movs	r3, #216	; 0xd8
 8000fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fde:	2309      	movs	r3, #9
 8000fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fd15 	bl	8001a18 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ff4:	f000 f83a 	bl	800106c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff8:	f000 fcbe 	bl	8001978 <HAL_PWREx_EnableOverDrive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001002:	f000 f833 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001028:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800102c:	2107      	movs	r1, #7
 800102e:	4618      	mov	r0, r3
 8001030:	f000 ff96 	bl	8001f60 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800103a:	f000 f817 	bl	800106c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800103e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001042:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001044:	2300      	movs	r3, #0
 8001046:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f959 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001058:	f000 f808 	bl	800106c <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	37d0      	adds	r7, #208	; 0xd0
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x44>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_MspInit+0x44>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x44>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x44>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x44>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f904 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART6_IRQHandler+0x10>)
 8001126:	f001 fd25 	bl	8002b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000005c 	.word	0x2000005c

08001134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <SystemInit+0x28>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <SystemInit+0x28>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <SystemInit+0x28>)
 800114a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114e:	609a      	str	r2, [r3, #8]
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <MX_USART6_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART6_UART_Init+0x58>)
 80011a4:	f001 fbf6 	bl	8002994 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f7ff ff5d 	bl	800106c <Error_Handler>
  }

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000005c 	.word	0x2000005c
 80011bc:	40011400 	.word	0x40011400

080011c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12f      	bne.n	8001242 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_UART_MspInit+0x90>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_UART_MspInit+0x90>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001222:	2308      	movs	r3, #8
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <HAL_UART_MspInit+0x94>)
 800122e:	f000 f9ef 	bl	8001610 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2047      	movs	r0, #71	; 0x47
 8001238:	f000 f991 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800123c:	2047      	movs	r0, #71	; 0x47
 800123e:	f000 f9aa 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40011400 	.word	0x40011400
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800125c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
  ldr  r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001278:	f842 3b04 	str.w	r3, [r2], #4

0800127c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001282:	f7ff ff57 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f002 faa7 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fe0d 	bl	8000ea8 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001294:	08003870 	.word	0x08003870
  ldr  r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800129c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012a0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012a4:	200000e0 	.word	0x200000e0

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>

080012aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f94a 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f805 	bl	80012c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012ba:	f7ff fedf 	bl	800107c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f965 	bl	80015b2 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f000 f92d 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	200000dc 	.word	0x200000dc

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	200000dc 	.word	0x200000dc

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_Delay+0x40>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	05fa0000 	.word	0x05fa0000

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00c      	b.n	8001602 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2205      	movs	r2, #5
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e169      	b.n	8001904 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	429a      	cmp	r2, r3
 800164a:	f040 8158 	bne.w	80018fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d00b      	beq.n	800166e <HAL_GPIO_Init+0x5e>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001662:	2b11      	cmp	r3, #17
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x100>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80b2 	beq.w	80018fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_GPIO_Init+0x308>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_GPIO_Init+0x308>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_GPIO_Init+0x308>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017b2:	4a5a      	ldr	r2, [pc, #360]	; (800191c <HAL_GPIO_Init+0x30c>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x310>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d02b      	beq.n	8001836 <HAL_GPIO_Init+0x226>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x314>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x222>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x318>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x21e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x31c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x21a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x320>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x216>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x212>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x328>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x20e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x20a>
 8001816:	2307      	movs	r3, #7
 8001818:	e00e      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800181a:	2308      	movs	r3, #8
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800181e:	2306      	movs	r3, #6
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001848:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_GPIO_Init+0x30c>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <HAL_GPIO_Init+0x330>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187a:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_GPIO_Init+0x330>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x330>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_GPIO_Init+0x330>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_GPIO_Init+0x330>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_GPIO_Init+0x330>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_GPIO_Init+0x330>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_GPIO_Init+0x330>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f ae92 	bls.w	8001630 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40021400 	.word	0x40021400
 8001938:	40021800 	.word	0x40021800
 800193c:	40021c00 	.word	0x40021c00
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
 8001950:	4613      	mov	r3, r2
 8001952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001954:	787b      	ldrb	r3, [r7, #1]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001960:	e003      	b.n	800196a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	041a      	lsls	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	619a      	str	r2, [r3, #24]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a6:	f7ff fcd1 	bl	800134c <HAL_GetTick>
 80019aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019ae:	f7ff fccd 	bl	800134c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	d901      	bls.n	80019c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e022      	b.n	8001a08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d1ee      	bne.n	80019ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff fcb6 	bl	800134c <HAL_GetTick>
 80019e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019e2:	e009      	b.n	80019f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e4:	f7ff fcb2 	bl	800134c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f2:	d901      	bls.n	80019f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e007      	b.n	8001a08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a04:	d1ee      	bne.n	80019e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e291      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8087 	beq.w	8001b4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3c:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d00c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a48:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d112      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62>
 8001a54:	4b90      	ldr	r3, [pc, #576]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a60:	d10b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d06c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x130>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d168      	bne.n	8001b48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e26b      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x7a>
 8001a84:	4b84      	ldr	r3, [pc, #528]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a83      	ldr	r2, [pc, #524]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e02e      	b.n	8001af0 <HAL_RCC_OscConfig+0xd8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x9c>
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7b      	ldr	r2, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xd8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xc0>
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a75      	ldr	r2, [pc, #468]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xd8>
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b6c      	ldr	r3, [pc, #432]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fc28 	bl	800134c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fc24 	bl	800134c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e21f      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe8>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc14 	bl	800134c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fc10 	bl	800134c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e20b      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x110>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d069      	beq.n	8001c2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x190>
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x17a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1df      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	493d      	ldr	r1, [pc, #244]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e040      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d023      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fbc6 	bl	800134c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fbc2 	bl	800134c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1bd      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4929      	ldr	r1, [pc, #164]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fba2 	bl	800134c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb9e 	bl	800134c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e199      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d038      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb7f 	bl	800134c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c52:	f7ff fb7b 	bl	800134c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e176      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x23a>
 8001c70:	e01a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb65 	bl	800134c <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff fb61 	bl	800134c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d903      	bls.n	8001c9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e15c      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
 8001c98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b91      	ldr	r3, [pc, #580]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a4 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a87      	ldr	r2, [pc, #540]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cde:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7e      	ldr	r2, [pc, #504]	; (8001ee8 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb29 	bl	800134c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fb25 	bl	800134c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e120      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x31a>
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x376>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x33c>
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a66      	ldr	r2, [pc, #408]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x376>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x35e>
 8001d5c:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x376>
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff fad9 	bl	800134c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fad5 	bl	800134c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ce      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x386>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fac3 	bl	800134c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fabf 	bl	800134c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80a4 	beq.w	8001f50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d06b      	beq.n	8001eec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d149      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff fa90 	bl	800134c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fa8c 	bl	800134c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e087      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4313      	orrs	r3, r2
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa60 	bl	800134c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fa5c 	bl	800134c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e057      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x478>
 8001eae:	e04f      	b.n	8001f50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa46 	bl	800134c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff fa42 	bl	800134c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e03d      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4ac>
 8001ee2:	e035      	b.n	8001f50 <HAL_RCC_OscConfig+0x538>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x544>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d028      	beq.n	8001f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d121      	bne.n	8001f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 020f 	bic.w	r2, r3, #15
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002054:	f7ff f97a 	bl	800134c <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff f976 	bl	800134c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1cc>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	fa21 f303 	lsr.w	r3, r1, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1d0>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f8d6 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00
 8002128:	40023800 	.word	0x40023800
 800212c:	08003848 	.word	0x08003848
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214e:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d007      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x32>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d008      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x38>
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 808d 	bne.w	800227e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002166:	60bb      	str	r3, [r7, #8]
      break;
 8002168:	e08c      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 800216c:	60bb      	str	r3, [r7, #8]
      break;
 800216e:	e089      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800217a:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	ea03 0501 	and.w	r5, r3, r1
 800219c:	ea04 0602 	and.w	r6, r4, r2
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 80021a2:	fb02 f106 	mul.w	r1, r2, r6
 80021a6:	2200      	movs	r2, #0
 80021a8:	fb02 f205 	mul.w	r2, r2, r5
 80021ac:	440a      	add	r2, r1
 80021ae:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_RCC_GetSysClockFreq+0x160>)
 80021b0:	fba5 0101 	umull	r0, r1, r5, r1
 80021b4:	1853      	adds	r3, r2, r1
 80021b6:	4619      	mov	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	461a      	mov	r2, r3
 80021c0:	4623      	mov	r3, r4
 80021c2:	f7fe f82d 	bl	8000220 <__aeabi_uldivmod>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e049      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	ea03 0501 	and.w	r5, r3, r1
 80021e4:	ea04 0602 	and.w	r6, r4, r2
 80021e8:	4629      	mov	r1, r5
 80021ea:	4632      	mov	r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0154      	lsls	r4, r2, #5
 80021f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fa:	014b      	lsls	r3, r1, #5
 80021fc:	4619      	mov	r1, r3
 80021fe:	4622      	mov	r2, r4
 8002200:	1b49      	subs	r1, r1, r5
 8002202:	eb62 0206 	sbc.w	r2, r2, r6
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0194      	lsls	r4, r2, #6
 8002210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002214:	018b      	lsls	r3, r1, #6
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	eb64 0402 	sbc.w	r4, r4, r2
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	00e2      	lsls	r2, r4, #3
 8002226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222a:	00d9      	lsls	r1, r3, #3
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	195b      	adds	r3, r3, r5
 8002232:	eb44 0406 	adc.w	r4, r4, r6
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	02a2      	lsls	r2, r4, #10
 8002240:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002244:	0299      	lsls	r1, r3, #10
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	4618      	mov	r0, r3
 800224c:	4621      	mov	r1, r4
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	f7fd ffe2 	bl	8000220 <__aeabi_uldivmod>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0x158>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	3301      	adds	r3, #1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	60bb      	str	r3, [r7, #8]
      break;
 800227c:	e002      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002280:	60bb      	str	r3, [r7, #8]
      break;
 8002282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002284:	68bb      	ldr	r3, [r7, #8]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	017d7840 	.word	0x017d7840

0800229c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000

080022b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b8:	f7ff fff0 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08003858 	.word	0x08003858

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff ffdc 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e4:	4601      	mov	r1, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	08003858 	.word	0x08003858

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d012      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a64      	ldr	r2, [pc, #400]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800232e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	4960      	ldr	r1, [pc, #384]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d017      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800235a:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	4955      	ldr	r1, [pc, #340]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002396:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	4946      	ldr	r1, [pc, #280]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 808b 	beq.w	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a39      	ldr	r2, [pc, #228]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe ffa8 	bl	800134c <HAL_GetTick>
 80023fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002400:	f7fe ffa4 	bl	800134c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2ba      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002426:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d035      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d02e      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d114      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe ff6c 	bl	800134c <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe ff68 	bl	800134c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e27c      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ee      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a6:	d111      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	4901      	ldr	r1, [pc, #4]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
 80024be:	e00b      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	0ffffcff 	.word	0x0ffffcff
 80024cc:	4ba3      	ldr	r3, [pc, #652]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4aa2      	ldr	r2, [pc, #648]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024d6:	6093      	str	r3, [r2, #8]
 80024d8:	4ba0      	ldr	r3, [pc, #640]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	499d      	ldr	r1, [pc, #628]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024f6:	4b99      	ldr	r3, [pc, #612]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fc:	4a97      	ldr	r2, [pc, #604]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002506:	4b95      	ldr	r3, [pc, #596]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002508:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4992      	ldr	r1, [pc, #584]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002524:	4b8d      	ldr	r3, [pc, #564]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	498a      	ldr	r1, [pc, #552]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002554:	4981      	ldr	r1, [pc, #516]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002568:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002576:	4979      	ldr	r1, [pc, #484]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800258a:	4b74      	ldr	r3, [pc, #464]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f023 0203 	bic.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	4970      	ldr	r1, [pc, #448]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ac:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f023 020c 	bic.w	r2, r3, #12
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4968      	ldr	r1, [pc, #416]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	495f      	ldr	r1, [pc, #380]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f0:	4b5a      	ldr	r3, [pc, #360]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	4957      	ldr	r1, [pc, #348]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002612:	4b52      	ldr	r3, [pc, #328]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	494e      	ldr	r1, [pc, #312]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002634:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	4946      	ldr	r1, [pc, #280]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	493d      	ldr	r1, [pc, #244]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4935      	ldr	r1, [pc, #212]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d011      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a8:	492c      	ldr	r1, [pc, #176]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d8:	4920      	ldr	r1, [pc, #128]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026fa:	4918      	ldr	r1, [pc, #96]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271c:	490f      	ldr	r1, [pc, #60]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	f040 809c 	bne.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800273c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7fe fe03 	bl	800134c <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fe fdff 	bl	800134c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d903      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e115      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800275c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002760:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d113      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002780:	4b83      	ldr	r3, [pc, #524]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	0e1b      	lsrs	r3, r3, #24
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	019a      	lsls	r2, r3, #6
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	071b      	lsls	r3, r3, #28
 80027a0:	497b      	ldr	r1, [pc, #492]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d2:	d11f      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027d4:	4b6e      	ldr	r3, [pc, #440]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	0f1b      	lsrs	r3, r3, #28
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	019a      	lsls	r2, r3, #6
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	431a      	orrs	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	071b      	lsls	r3, r3, #28
 80027f4:	4966      	ldr	r1, [pc, #408]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002802:	f023 021f 	bic.w	r2, r3, #31
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	3b01      	subs	r3, #1
 800280c:	4960      	ldr	r1, [pc, #384]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	019a      	lsls	r2, r3, #6
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	4956      	ldr	r1, [pc, #344]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800283c:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a53      	ldr	r2, [pc, #332]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002842:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe fd80 	bl	800134c <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002850:	f7fe fd7c 	bl	800134c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e092      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002862:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	f040 8088 	bne.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a45      	ldr	r2, [pc, #276]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002882:	f7fe fd63 	bl	800134c <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800288a:	f7fe fd5f 	bl	800134c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e075      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d0ef      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d120      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	019a      	lsls	r2, r3, #6
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4927      	ldr	r1, [pc, #156]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	3b01      	subs	r3, #1
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	4920      	ldr	r1, [pc, #128]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002928:	d113      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	019a      	lsls	r2, r3, #6
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	4911      	ldr	r1, [pc, #68]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295e:	f7fe fcf5 	bl	800134c <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002966:	f7fe fcf1 	bl	800134c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e007      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d1ef      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e040      	b.n	8002a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fc02 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa14 	bl	8002e00 <UART_SetConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e022      	b.n	8002a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fcb2 	bl	8003354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fd39 	bl	8003498 <UART_CheckIdleState>
 8002a26:	4603      	mov	r3, r0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	f040 808a 	bne.w	8002b5c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_UART_Receive_IT+0x24>
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e082      	b.n	8002b5e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Receive_IT+0x36>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e07b      	b.n	8002b5e <HAL_UART_Receive_IT+0x12e>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	d10e      	bne.n	8002ab2 <HAL_UART_Receive_IT+0x82>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_UART_Receive_IT+0x78>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aa6:	e02d      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ab0:	e028      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_UART_Receive_IT+0xa6>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Receive_IT+0x9c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aca:	e01b      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	227f      	movs	r2, #127	; 0x7f
 8002ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad4:	e016      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ade:	d10d      	bne.n	8002afc <HAL_UART_Receive_IT+0xcc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_UART_Receive_IT+0xc2>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	227f      	movs	r2, #127	; 0x7f
 8002aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af0:	e008      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Receive_IT+0xd4>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2222      	movs	r2, #34	; 0x22
 8002b0e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d107      	bne.n	8002b3a <HAL_UART_Receive_IT+0x10a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_UART_Receive_IT+0x13c>)
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60
 8002b38:	e002      	b.n	8002b40 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_UART_Receive_IT+0x140>)
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002b56:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	08003731 	.word	0x08003731
 8002b70:	0800368b 	.word	0x0800368b

08002b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d113      	bne.n	8002bcc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8100 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
      }
      return;
 8002bca:	e0fa      	b.n	8002dc2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d5 	beq.w	8002d7e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ca 	beq.w	8002d7e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <HAL_UART_IRQHandler+0x9e>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_UART_IRQHandler+0xc6>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <HAL_UART_IRQHandler+0xee>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5a:	f043 0202 	orr.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8c:	f043 0208 	orr.w	r2, r3, #8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <HAL_UART_IRQHandler+0x14a>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d07f      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d004      	beq.n	8002d08 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fc6f 	bl	80035ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d123      	bne.n	8002d64 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_UART_IRQHandler+0x260>)
 8002d3a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fc42 	bl	80015ca <HAL_DMA_Abort_IT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d016      	beq.n	8002d7a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d56:	4610      	mov	r0, r2
 8002d58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5a:	e00e      	b.n	8002d7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f845 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d62:	e00a      	b.n	8002d7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f841 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6a:	e006      	b.n	8002d7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f83d 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002d78:	e025      	b.n	8002dc6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7a:	bf00      	nop
    return;
 8002d7c:	e023      	b.n	8002dc6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d017      	beq.n	8002dca <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
    }
    return;
 8002da2:	e012      	b.n	8002dca <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00e      	beq.n	8002dcc <HAL_UART_IRQHandler+0x258>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fc4d 	bl	8003658 <UART_EndTransmit_IT>
    return;
 8002dbe:	bf00      	nop
 8002dc0:	e004      	b.n	8002dcc <HAL_UART_IRQHandler+0x258>
      return;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <HAL_UART_IRQHandler+0x258>
    return;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HAL_UART_IRQHandler+0x258>
    return;
 8002dca:	bf00      	nop
  }

}
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	0800362d 	.word	0x0800362d

08002dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4bb1      	ldr	r3, [pc, #708]	; (80030f4 <UART_SetConfig+0x2f4>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6939      	ldr	r1, [r7, #16]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a9f      	ldr	r2, [pc, #636]	; (80030f8 <UART_SetConfig+0x2f8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d121      	bne.n	8002ec4 <UART_SetConfig+0xc4>
 8002e80:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d816      	bhi.n	8002ebc <UART_SetConfig+0xbc>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x94>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb1 	.word	0x08002eb1
 8002e9c:	08002eab 	.word	0x08002eab
 8002ea0:	08002eb7 	.word	0x08002eb7
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e151      	b.n	800314e <UART_SetConfig+0x34e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e14e      	b.n	800314e <UART_SetConfig+0x34e>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e14b      	b.n	800314e <UART_SetConfig+0x34e>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e148      	b.n	800314e <UART_SetConfig+0x34e>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	bf00      	nop
 8002ec2:	e144      	b.n	800314e <UART_SetConfig+0x34e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a8d      	ldr	r2, [pc, #564]	; (8003100 <UART_SetConfig+0x300>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d134      	bne.n	8002f38 <UART_SetConfig+0x138>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <UART_SetConfig+0x2fc>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d829      	bhi.n	8002f30 <UART_SetConfig+0x130>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0xe4>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f31 	.word	0x08002f31
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f25 	.word	0x08002f25
 8002ef8:	08002f31 	.word	0x08002f31
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f31 	.word	0x08002f31
 8002f04:	08002f1f 	.word	0x08002f1f
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f31 	.word	0x08002f31
 8002f14:	08002f2b 	.word	0x08002f2b
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e117      	b.n	800314e <UART_SetConfig+0x34e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e114      	b.n	800314e <UART_SetConfig+0x34e>
 8002f24:	2304      	movs	r3, #4
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e111      	b.n	800314e <UART_SetConfig+0x34e>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e10e      	b.n	800314e <UART_SetConfig+0x34e>
 8002f30:	2310      	movs	r3, #16
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	bf00      	nop
 8002f36:	e10a      	b.n	800314e <UART_SetConfig+0x34e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a71      	ldr	r2, [pc, #452]	; (8003104 <UART_SetConfig+0x304>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d120      	bne.n	8002f84 <UART_SetConfig+0x184>
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <UART_SetConfig+0x2fc>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d00f      	beq.n	8002f70 <UART_SetConfig+0x170>
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d802      	bhi.n	8002f5a <UART_SetConfig+0x15a>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <UART_SetConfig+0x164>
 8002f58:	e010      	b.n	8002f7c <UART_SetConfig+0x17c>
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d005      	beq.n	8002f6a <UART_SetConfig+0x16a>
 8002f5e:	2b30      	cmp	r3, #48	; 0x30
 8002f60:	d009      	beq.n	8002f76 <UART_SetConfig+0x176>
 8002f62:	e00b      	b.n	8002f7c <UART_SetConfig+0x17c>
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e0f1      	b.n	800314e <UART_SetConfig+0x34e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e0ee      	b.n	800314e <UART_SetConfig+0x34e>
 8002f70:	2304      	movs	r3, #4
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e0eb      	b.n	800314e <UART_SetConfig+0x34e>
 8002f76:	2308      	movs	r3, #8
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e0e8      	b.n	800314e <UART_SetConfig+0x34e>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	bf00      	nop
 8002f82:	e0e4      	b.n	800314e <UART_SetConfig+0x34e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <UART_SetConfig+0x308>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d120      	bne.n	8002fd0 <UART_SetConfig+0x1d0>
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <UART_SetConfig+0x2fc>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d00f      	beq.n	8002fbc <UART_SetConfig+0x1bc>
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d802      	bhi.n	8002fa6 <UART_SetConfig+0x1a6>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <UART_SetConfig+0x1b0>
 8002fa4:	e010      	b.n	8002fc8 <UART_SetConfig+0x1c8>
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d005      	beq.n	8002fb6 <UART_SetConfig+0x1b6>
 8002faa:	2bc0      	cmp	r3, #192	; 0xc0
 8002fac:	d009      	beq.n	8002fc2 <UART_SetConfig+0x1c2>
 8002fae:	e00b      	b.n	8002fc8 <UART_SetConfig+0x1c8>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0cb      	b.n	800314e <UART_SetConfig+0x34e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0c8      	b.n	800314e <UART_SetConfig+0x34e>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e0c5      	b.n	800314e <UART_SetConfig+0x34e>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e0c2      	b.n	800314e <UART_SetConfig+0x34e>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	bf00      	nop
 8002fce:	e0be      	b.n	800314e <UART_SetConfig+0x34e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	; (800310c <UART_SetConfig+0x30c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d124      	bne.n	8003024 <UART_SetConfig+0x224>
 8002fda:	4b48      	ldr	r3, [pc, #288]	; (80030fc <UART_SetConfig+0x2fc>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d012      	beq.n	8003010 <UART_SetConfig+0x210>
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	d802      	bhi.n	8002ff6 <UART_SetConfig+0x1f6>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <UART_SetConfig+0x204>
 8002ff4:	e012      	b.n	800301c <UART_SetConfig+0x21c>
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d006      	beq.n	800300a <UART_SetConfig+0x20a>
 8002ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003000:	d009      	beq.n	8003016 <UART_SetConfig+0x216>
 8003002:	e00b      	b.n	800301c <UART_SetConfig+0x21c>
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e0a1      	b.n	800314e <UART_SetConfig+0x34e>
 800300a:	2302      	movs	r3, #2
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e09e      	b.n	800314e <UART_SetConfig+0x34e>
 8003010:	2304      	movs	r3, #4
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e09b      	b.n	800314e <UART_SetConfig+0x34e>
 8003016:	2308      	movs	r3, #8
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e098      	b.n	800314e <UART_SetConfig+0x34e>
 800301c:	2310      	movs	r3, #16
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	bf00      	nop
 8003022:	e094      	b.n	800314e <UART_SetConfig+0x34e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a39      	ldr	r2, [pc, #228]	; (8003110 <UART_SetConfig+0x310>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d124      	bne.n	8003078 <UART_SetConfig+0x278>
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <UART_SetConfig+0x2fc>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d012      	beq.n	8003064 <UART_SetConfig+0x264>
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d802      	bhi.n	800304a <UART_SetConfig+0x24a>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <UART_SetConfig+0x258>
 8003048:	e012      	b.n	8003070 <UART_SetConfig+0x270>
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304e:	d006      	beq.n	800305e <UART_SetConfig+0x25e>
 8003050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003054:	d009      	beq.n	800306a <UART_SetConfig+0x26a>
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x270>
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e077      	b.n	800314e <UART_SetConfig+0x34e>
 800305e:	2302      	movs	r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e074      	b.n	800314e <UART_SetConfig+0x34e>
 8003064:	2304      	movs	r3, #4
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e071      	b.n	800314e <UART_SetConfig+0x34e>
 800306a:	2308      	movs	r3, #8
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e06e      	b.n	800314e <UART_SetConfig+0x34e>
 8003070:	2310      	movs	r3, #16
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	bf00      	nop
 8003076:	e06a      	b.n	800314e <UART_SetConfig+0x34e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a25      	ldr	r2, [pc, #148]	; (8003114 <UART_SetConfig+0x314>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d124      	bne.n	80030cc <UART_SetConfig+0x2cc>
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <UART_SetConfig+0x2fc>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003090:	d012      	beq.n	80030b8 <UART_SetConfig+0x2b8>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d802      	bhi.n	800309e <UART_SetConfig+0x29e>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <UART_SetConfig+0x2ac>
 800309c:	e012      	b.n	80030c4 <UART_SetConfig+0x2c4>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d006      	beq.n	80030b2 <UART_SetConfig+0x2b2>
 80030a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030a8:	d009      	beq.n	80030be <UART_SetConfig+0x2be>
 80030aa:	e00b      	b.n	80030c4 <UART_SetConfig+0x2c4>
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e04d      	b.n	800314e <UART_SetConfig+0x34e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e04a      	b.n	800314e <UART_SetConfig+0x34e>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e047      	b.n	800314e <UART_SetConfig+0x34e>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e044      	b.n	800314e <UART_SetConfig+0x34e>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	bf00      	nop
 80030ca:	e040      	b.n	800314e <UART_SetConfig+0x34e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a11      	ldr	r2, [pc, #68]	; (8003118 <UART_SetConfig+0x318>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d139      	bne.n	800314a <UART_SetConfig+0x34a>
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <UART_SetConfig+0x2fc>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e4:	d027      	beq.n	8003136 <UART_SetConfig+0x336>
 80030e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ea:	d817      	bhi.n	800311c <UART_SetConfig+0x31c>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01c      	beq.n	800312a <UART_SetConfig+0x32a>
 80030f0:	e027      	b.n	8003142 <UART_SetConfig+0x342>
 80030f2:	bf00      	nop
 80030f4:	efff69f3 	.word	0xefff69f3
 80030f8:	40011000 	.word	0x40011000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40004400 	.word	0x40004400
 8003104:	40004800 	.word	0x40004800
 8003108:	40004c00 	.word	0x40004c00
 800310c:	40005000 	.word	0x40005000
 8003110:	40011400 	.word	0x40011400
 8003114:	40007800 	.word	0x40007800
 8003118:	40007c00 	.word	0x40007c00
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	d006      	beq.n	8003130 <UART_SetConfig+0x330>
 8003122:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003126:	d009      	beq.n	800313c <UART_SetConfig+0x33c>
 8003128:	e00b      	b.n	8003142 <UART_SetConfig+0x342>
 800312a:	2300      	movs	r3, #0
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e00e      	b.n	800314e <UART_SetConfig+0x34e>
 8003130:	2302      	movs	r3, #2
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e00b      	b.n	800314e <UART_SetConfig+0x34e>
 8003136:	2304      	movs	r3, #4
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e008      	b.n	800314e <UART_SetConfig+0x34e>
 800313c:	2308      	movs	r3, #8
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e005      	b.n	800314e <UART_SetConfig+0x34e>
 8003142:	2310      	movs	r3, #16
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	bf00      	nop
 8003148:	e001      	b.n	800314e <UART_SetConfig+0x34e>
 800314a:	2310      	movs	r3, #16
 800314c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d17f      	bne.n	8003258 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d85c      	bhi.n	8003218 <UART_SetConfig+0x418>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x364>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	080031a9 	.word	0x080031a9
 800316c:	080031c9 	.word	0x080031c9
 8003170:	08003219 	.word	0x08003219
 8003174:	080031e1 	.word	0x080031e1
 8003178:	08003219 	.word	0x08003219
 800317c:	08003219 	.word	0x08003219
 8003180:	08003219 	.word	0x08003219
 8003184:	08003201 	.word	0x08003201
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff f894 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 800318c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	61bb      	str	r3, [r7, #24]
        break;
 80031a6:	e03a      	b.n	800321e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7ff f898 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	61bb      	str	r3, [r7, #24]
        break;
 80031c6:	e02a      	b.n	800321e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085a      	lsrs	r2, r3, #1
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <UART_SetConfig+0x54c>)
 80031d0:	4413      	add	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6852      	ldr	r2, [r2, #4]
 80031d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	61bb      	str	r3, [r7, #24]
        break;
 80031de:	e01e      	b.n	800321e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e0:	f7fe ffaa 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80031e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	61bb      	str	r3, [r7, #24]
        break;
 80031fe:	e00e      	b.n	800321e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	b29b      	uxth	r3, r3
 8003214:	61bb      	str	r3, [r7, #24]
        break;
 8003216:	e002      	b.n	800321e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
        break;
 800321c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d916      	bls.n	8003252 <UART_SetConfig+0x452>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d212      	bcs.n	8003252 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b29a      	uxth	r2, r3
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	4313      	orrs	r3, r2
 8003246:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	897a      	ldrh	r2, [r7, #10]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e070      	b.n	8003334 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
 8003256:	e06d      	b.n	8003334 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003258:	7ffb      	ldrb	r3, [r7, #31]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d859      	bhi.n	8003312 <UART_SetConfig+0x512>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x464>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003289 	.word	0x08003289
 8003268:	080032a7 	.word	0x080032a7
 800326c:	080032c5 	.word	0x080032c5
 8003270:	08003313 	.word	0x08003313
 8003274:	080032dd 	.word	0x080032dd
 8003278:	08003313 	.word	0x08003313
 800327c:	08003313 	.word	0x08003313
 8003280:	08003313 	.word	0x08003313
 8003284:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff f814 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 800328c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085a      	lsrs	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	61bb      	str	r3, [r7, #24]
        break;
 80032a4:	e038      	b.n	8003318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a6:	f7ff f819 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80032aa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	085a      	lsrs	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	61bb      	str	r3, [r7, #24]
        break;
 80032c2:	e029      	b.n	8003318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085a      	lsrs	r2, r3, #1
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <UART_SetConfig+0x550>)
 80032cc:	4413      	add	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e01d      	b.n	8003318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032dc:	f7fe ff2c 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80032e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085a      	lsrs	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e00e      	b.n	8003318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	b29b      	uxth	r3, r3
 800330e:	61bb      	str	r3, [r7, #24]
        break;
 8003310:	e002      	b.n	8003318 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
        break;
 8003316:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d908      	bls.n	8003330 <UART_SetConfig+0x530>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d204      	bcs.n	8003330 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e001      	b.n	8003334 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	01e84800 	.word	0x01e84800
 8003350:	00f42400 	.word	0x00f42400

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d10a      	bne.n	800346a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034a6:	f7fd ff51 	bl	800134c <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d10e      	bne.n	80034d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f814 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e00a      	b.n	80034ee <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	e05d      	b.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	d059      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fd ff1c 	bl	800134c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <UART_WaitOnFlagUntilTimeout+0x30>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11b      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003534:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e042      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02b      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357a:	d123      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003584:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003594:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e00f      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d092      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003602:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff fbce 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fbab 	bl	8002dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003698:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	d13a      	bne.n	8003718 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036aa:	89bb      	ldrh	r3, [r7, #12]
 80036ac:	b2d9      	uxtb	r1, r3
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	400a      	ands	r2, r1
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d121      	bne.n	8003728 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd fbfd 	bl	8000f10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003716:	e007      	b.n	8003728 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	619a      	str	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800373e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003744:	2b22      	cmp	r3, #34	; 0x22
 8003746:	d13a      	bne.n	80037be <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003756:	89ba      	ldrh	r2, [r7, #12]
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	4013      	ands	r3, r2
 800375c:	b29a      	uxth	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003798:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fbaa 	bl	8000f10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037bc:	e007      	b.n	80037ce <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4e0d      	ldr	r6, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1ba4      	subs	r4, r4, r6
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2500      	movs	r5, #0
 80037e4:	42a5      	cmp	r5, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4e0b      	ldr	r6, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 f820 	bl	8003830 <_init>
 80037f0:	1ba4      	subs	r4, r4, r6
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2500      	movs	r5, #0
 80037f6:	42a5      	cmp	r5, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003800:	4798      	blx	r3
 8003802:	3501      	adds	r5, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800380a:	4798      	blx	r3
 800380c:	3501      	adds	r5, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08003868 	.word	0x08003868
 8003814:	08003868 	.word	0x08003868
 8003818:	08003868 	.word	0x08003868
 800381c:	0800386c 	.word	0x0800386c

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <_init>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr

0800383c <_fini>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr
