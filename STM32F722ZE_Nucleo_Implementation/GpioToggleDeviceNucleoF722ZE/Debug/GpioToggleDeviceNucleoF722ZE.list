
GpioToggleDeviceNucleoF722ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d670  2000000c  08003a14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d67c  08003a14  0002d67c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  00029611  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002b060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020eb1  00000000  00000000  0002c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084c7  00000000  00000000  0004cee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd7a7  00000000  00000000  000553b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122b57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  00122bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080039c8 	.word	0x080039c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080039c8 	.word	0x080039c8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CommandParser_init>:
void CommandParser_init(
		struct CommandParser* this,
		struct Fifo* _fifo,
		uint8_t _syncByte1,
		uint8_t _syncByte2)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	4611      	mov	r1, r2
 800052c:	461a      	mov	r2, r3
 800052e:	460b      	mov	r3, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	this->m_fifo = _fifo;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
	this->m_syncByte1 = _syncByte1;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	711a      	strb	r2, [r3, #4]
	this->m_syncByte2 = _syncByte2;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	715a      	strb	r2, [r3, #5]

	this->m_syncByte1Flag = 0;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2200      	movs	r2, #0
 800054c:	719a      	strb	r2, [r3, #6]
	this->m_syncByte2Flag = 0;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	71da      	strb	r2, [r3, #7]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <CommandParser_getCommand>:


uint8_t CommandParser_getCommand(
		struct CommandParser* this)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	if(!Fifo_isEmpty(this->m_fifo))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f89a 	bl	80006a6 <Fifo_isEmpty>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d13a      	bne.n	80005ee <CommandParser_getCommand+0x8e>
	{
		byte = Fifo_pop(this->m_fifo);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f872 	bl	8000666 <Fifo_pop>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

		if(byte == this->m_syncByte1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	429a      	cmp	r2, r3
 800058e:	d107      	bne.n	80005a0 <CommandParser_getCommand+0x40>
				&& !this->m_syncByte1Flag)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d103      	bne.n	80005a0 <CommandParser_getCommand+0x40>
		{
			this->m_syncByte1Flag = 1;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	719a      	strb	r2, [r3, #6]
 800059e:	e026      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(byte == this->m_syncByte2
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10b      	bne.n	80005c2 <CommandParser_getCommand+0x62>
				&& this->m_syncByte1Flag
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d007      	beq.n	80005c2 <CommandParser_getCommand+0x62>
				&& !this->m_syncByte2Flag)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	79db      	ldrb	r3, [r3, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <CommandParser_getCommand+0x62>
		{
			this->m_syncByte2Flag = 1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	71da      	strb	r2, [r3, #7]
 80005c0:	e015      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(this->m_syncByte1Flag && this->m_syncByte2Flag)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00b      	beq.n	80005e2 <CommandParser_getCommand+0x82>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <CommandParser_getCommand+0x82>
		{
			this->m_syncByte1Flag = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	71da      	strb	r2, [r3, #7]
			return byte;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	e006      	b.n	80005f0 <CommandParser_getCommand+0x90>
		}

		else
		{
			this->m_syncByte1Flag = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	71da      	strb	r2, [r3, #7]
		}
	}
	return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Fifo_init>:

void Fifo_init(
		struct Fifo* this,
		uint8_t* _buffer,
		uint32_t _bufferLength)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	this->m_buffer = _buffer;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	601a      	str	r2, [r3, #0]
	this->m_bufferLength = _bufferLength;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
	this->m_head = 0;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	this->m_tail = 0;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <Fifo_push>:

void Fifo_push(
		struct Fifo* this,
		uint8_t _byte)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	this->m_buffer[this->m_head] = _byte;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4413      	add	r3, r2
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	701a      	strb	r2, [r3, #0]

	this->m_head = (this->m_head + 1) % this->m_bufferLength;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000650:	fb02 f201 	mul.w	r2, r2, r1
 8000654:	1a9a      	subs	r2, r3, r2
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <Fifo_pop>:

uint8_t Fifo_pop(
		struct Fifo* this)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	uint8_t retByte = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]

	retByte = this->m_buffer[this->m_tail];
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	73fb      	strb	r3, [r7, #15]
	this->m_tail = (this->m_tail + 1) % this->m_bufferLength;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6852      	ldr	r2, [r2, #4]
 800068a:	fbb3 f1f2 	udiv	r1, r3, r2
 800068e:	fb02 f201 	mul.w	r2, r2, r1
 8000692:	1a9a      	subs	r2, r3, r2
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]

	return retByte;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <Fifo_isEmpty>:

uint8_t Fifo_isEmpty(
		struct Fifo* this)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	return this->m_head == this->m_tail;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	bf0c      	ite	eq
 80006ba:	2301      	moveq	r3, #1
 80006bc:	2300      	movne	r3, #0
 80006be:	b2db      	uxtb	r3, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a42      	ldr	r2, [pc, #264]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a36      	ldr	r2, [pc, #216]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x124>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0x124>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	481f      	ldr	r0, [pc, #124]	; (80007f4 <MX_GPIO_Init+0x128>)
 8000778:	f001 f904 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_0_Pin|TOGGLE_PIN_3_Pin|TOGGLE_PIN_5_Pin;
 800077c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000792:	f000 ff5d 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_1_Pin|TOGGLE_PIN_2_Pin|TOGGLE_PIN_4_Pin;
 8000796:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_GPIO_Init+0x130>)
 80007ac:	f000 ff50 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_7_Pin|TOGGLE_PIN_6_Pin;
 80007b0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_GPIO_Init+0x134>)
 80007c6:	f000 ff43 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0x128>)
 80007e2:	f000 ff35 	bl	8001650 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021000 	.word	0x40021000
 8000800:	40021800 	.word	0x40021800

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fd6e 	bl	80012ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f8d1 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff ff5b 	bl	80006cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000816:	f000 fcc3 	bl	80011a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Fifo_init(&g_fifo, FifoBuffer, 100);
 800081a:	2264      	movs	r2, #100	; 0x64
 800081c:	494c      	ldr	r1, [pc, #304]	; (8000950 <main+0x14c>)
 800081e:	484d      	ldr	r0, [pc, #308]	; (8000954 <main+0x150>)
 8000820:	f7ff feea 	bl	80005f8 <Fifo_init>
  CommandParser_init(&g_commandParser, &g_fifo, SyncByte1, SyncByte2);
 8000824:	23c3      	movs	r3, #195	; 0xc3
 8000826:	22a5      	movs	r2, #165	; 0xa5
 8000828:	494a      	ldr	r1, [pc, #296]	; (8000954 <main+0x150>)
 800082a:	484b      	ldr	r0, [pc, #300]	; (8000958 <main+0x154>)
 800082c:	f7ff fe78 	bl	8000520 <CommandParser_init>

  Fifo_init(&g_pin0Fifo, pin0StateBuffer, COMMANDLENGTH);
 8000830:	f242 7210 	movw	r2, #10000	; 0x2710
 8000834:	4949      	ldr	r1, [pc, #292]	; (800095c <main+0x158>)
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <main+0x15c>)
 8000838:	f7ff fede 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin1Fifo, pin1StateBuffer, COMMANDLENGTH);
 800083c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000840:	4948      	ldr	r1, [pc, #288]	; (8000964 <main+0x160>)
 8000842:	4849      	ldr	r0, [pc, #292]	; (8000968 <main+0x164>)
 8000844:	f7ff fed8 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin2Fifo, pin2StateBuffer, COMMANDLENGTH);
 8000848:	f242 7210 	movw	r2, #10000	; 0x2710
 800084c:	4947      	ldr	r1, [pc, #284]	; (800096c <main+0x168>)
 800084e:	4848      	ldr	r0, [pc, #288]	; (8000970 <main+0x16c>)
 8000850:	f7ff fed2 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin3Fifo, pin3StateBuffer, COMMANDLENGTH);
 8000854:	f242 7210 	movw	r2, #10000	; 0x2710
 8000858:	4946      	ldr	r1, [pc, #280]	; (8000974 <main+0x170>)
 800085a:	4847      	ldr	r0, [pc, #284]	; (8000978 <main+0x174>)
 800085c:	f7ff fecc 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin4Fifo, pin4StateBuffer, COMMANDLENGTH);
 8000860:	f242 7210 	movw	r2, #10000	; 0x2710
 8000864:	4945      	ldr	r1, [pc, #276]	; (800097c <main+0x178>)
 8000866:	4846      	ldr	r0, [pc, #280]	; (8000980 <main+0x17c>)
 8000868:	f7ff fec6 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin5Fifo, pin5StateBuffer, COMMANDLENGTH);
 800086c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000870:	4944      	ldr	r1, [pc, #272]	; (8000984 <main+0x180>)
 8000872:	4845      	ldr	r0, [pc, #276]	; (8000988 <main+0x184>)
 8000874:	f7ff fec0 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin6Fifo, pin6StateBuffer, COMMANDLENGTH);
 8000878:	f242 7210 	movw	r2, #10000	; 0x2710
 800087c:	4943      	ldr	r1, [pc, #268]	; (800098c <main+0x188>)
 800087e:	4844      	ldr	r0, [pc, #272]	; (8000990 <main+0x18c>)
 8000880:	f7ff feba 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin7Fifo, pin7StateBuffer, COMMANDLENGTH);
 8000884:	f242 7210 	movw	r2, #10000	; 0x2710
 8000888:	4942      	ldr	r1, [pc, #264]	; (8000994 <main+0x190>)
 800088a:	4843      	ldr	r0, [pc, #268]	; (8000998 <main+0x194>)
 800088c:	f7ff feb4 	bl	80005f8 <Fifo_init>

  Fifo_init(&timeDelayFifo, timeDelayBuffer, COMMANDLENGTHX2);
 8000890:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000894:	4941      	ldr	r1, [pc, #260]	; (800099c <main+0x198>)
 8000896:	4842      	ldr	r0, [pc, #264]	; (80009a0 <main+0x19c>)
 8000898:	f7ff feae 	bl	80005f8 <Fifo_init>

  HAL_UART_Receive_IT(&huart3, &byte, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	4941      	ldr	r1, [pc, #260]	; (80009a4 <main+0x1a0>)
 80008a0:	4841      	ldr	r0, [pc, #260]	; (80009a8 <main+0x1a4>)
 80008a2:	f002 f991 	bl	8002bc8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t counter = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 fd7a 	bl	80013a4 <HAL_Delay>
	  counter++;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]

	  if(counter == 255)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2bff      	cmp	r3, #255	; 0xff
 80008ba:	d103      	bne.n	80008c4 <main+0xc0>
	  {
		  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	483b      	ldr	r0, [pc, #236]	; (80009ac <main+0x1a8>)
 80008c0:	f001 f879 	bl	80019b6 <HAL_GPIO_TogglePin>
	  }

	  command = CommandParser_getCommand(&g_commandParser);
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <main+0x154>)
 80008c6:	f7ff fe4b 	bl	8000560 <CommandParser_getCommand>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x1ac>)
 80008d0:	701a      	strb	r2, [r3, #0]

	  switch(command)
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <main+0x1ac>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3ba1      	subs	r3, #161	; 0xa1
 80008d8:	2b13      	cmp	r3, #19
 80008da:	d837      	bhi.n	800094c <main+0x148>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <main+0xe0>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	0800094d 	.word	0x0800094d
 80008e8:	0800094d 	.word	0x0800094d
 80008ec:	0800094d 	.word	0x0800094d
 80008f0:	0800094d 	.word	0x0800094d
 80008f4:	0800094d 	.word	0x0800094d
 80008f8:	0800094d 	.word	0x0800094d
 80008fc:	0800094d 	.word	0x0800094d
 8000900:	0800094d 	.word	0x0800094d
 8000904:	0800094d 	.word	0x0800094d
 8000908:	0800094d 	.word	0x0800094d
 800090c:	0800094d 	.word	0x0800094d
 8000910:	0800094d 	.word	0x0800094d
 8000914:	0800094d 	.word	0x0800094d
 8000918:	0800094d 	.word	0x0800094d
 800091c:	0800094d 	.word	0x0800094d
 8000920:	0800094d 	.word	0x0800094d
 8000924:	08000935 	.word	0x08000935
 8000928:	0800093b 	.word	0x0800093b
 800092c:	08000941 	.word	0x08000941
 8000930:	08000947 	.word	0x08000947
	  {
	  case c_Connect:
		  break;
	  case c_ExecuteTimedSequence:
		  ExecuteTimedSequence();
 8000934:	f000 f8ec 	bl	8000b10 <ExecuteTimedSequence>
		  break;
 8000938:	e009      	b.n	800094e <main+0x14a>
	  case c_SetPersistentState:
		  SetPersistentState();
 800093a:	f000 f985 	bl	8000c48 <SetPersistentState>
		  break;
 800093e:	e006      	b.n	800094e <main+0x14a>
	  case c_Release:
		  Release();
 8000940:	f000 f9f6 	bl	8000d30 <Release>
		  break;
 8000944:	e003      	b.n	800094e <main+0x14a>
	  case c_EndSends:
		  EndSends();
 8000946:	f000 fa29 	bl	8000d9c <EndSends>
		  break;
 800094a:	e000      	b.n	800094e <main+0x14a>
	  default:
		  break;
 800094c:	bf00      	nop
	  HAL_Delay(10);
 800094e:	e7ac      	b.n	80008aa <main+0xa6>
 8000950:	2000002c 	.word	0x2000002c
 8000954:	2001d560 	.word	0x2001d560
 8000958:	2001d570 	.word	0x2001d570
 800095c:	20000090 	.word	0x20000090
 8000960:	2001d5d8 	.word	0x2001d5d8
 8000964:	200027a0 	.word	0x200027a0
 8000968:	2001d5b8 	.word	0x2001d5b8
 800096c:	20004eb0 	.word	0x20004eb0
 8000970:	2001d598 	.word	0x2001d598
 8000974:	200075c0 	.word	0x200075c0
 8000978:	2001d550 	.word	0x2001d550
 800097c:	20009cd0 	.word	0x20009cd0
 8000980:	2001d5e8 	.word	0x2001d5e8
 8000984:	2000c3e0 	.word	0x2000c3e0
 8000988:	2001d5a8 	.word	0x2001d5a8
 800098c:	2000eaf0 	.word	0x2000eaf0
 8000990:	2001d5c8 	.word	0x2001d5c8
 8000994:	20011200 	.word	0x20011200
 8000998:	2001d588 	.word	0x2001d588
 800099c:	20013910 	.word	0x20013910
 80009a0:	2001d578 	.word	0x2001d578
 80009a4:	20000028 	.word	0x20000028
 80009a8:	2001d5f8 	.word	0x2001d5f8
 80009ac:	40020400 	.word	0x40020400
 80009b0:	20000029 	.word	0x20000029

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0b4      	sub	sp, #208	; 0xd0
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fff8 	bl	80039b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 ffe9 	bl	80039b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <SystemClock_Config+0x118>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a38      	ldr	r2, [pc, #224]	; (8000acc <SystemClock_Config+0x118>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <SystemClock_Config+0x118>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <SystemClock_Config+0x11c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <SystemClock_Config+0x11c>)
 8000a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <SystemClock_Config+0x11c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2310      	movs	r3, #16
 8000a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a34:	2308      	movs	r3, #8
 8000a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a3a:	23d8      	movs	r3, #216	; 0xd8
 8000a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f81b 	bl	8001a8c <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a5c:	f000 fb26 	bl	80010ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a60:	f000 ffc4 	bl	80019ec <HAL_PWREx_EnableOverDrive>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a6a:	f000 fb1f 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a94:	2107      	movs	r1, #7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fa9c 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aa2:	f000 fb03 	bl	80010ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fc5f 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ac0:	f000 faf4 	bl	80010ac <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	37d0      	adds	r7, #208	; 0xd0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <HAL_UART_RxCpltCallback+0x30>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d10a      	bne.n	8000afa <HAL_UART_RxCpltCallback+0x26>
	{
		Fifo_push(&g_fifo, byte);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_UART_RxCpltCallback+0x34>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <HAL_UART_RxCpltCallback+0x38>)
 8000aec:	f7ff fd9c 	bl	8000628 <Fifo_push>
		HAL_UART_Receive_IT(&huart3, &byte, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4905      	ldr	r1, [pc, #20]	; (8000b08 <HAL_UART_RxCpltCallback+0x34>)
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <HAL_UART_RxCpltCallback+0x30>)
 8000af6:	f002 f867 	bl	8002bc8 <HAL_UART_Receive_IT>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2001d5f8 	.word	0x2001d5f8
 8000b08:	20000028 	.word	0x20000028
 8000b0c:	2001d560 	.word	0x2001d560

08000b10 <ExecuteTimedSequence>:

void ExecuteTimedSequence()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71fb      	strb	r3, [r7, #7]

	Fifo_pop(&g_fifo);
 8000b1a:	4841      	ldr	r0, [pc, #260]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b1c:	f7ff fda3 	bl	8000666 <Fifo_pop>

	byte = Fifo_pop(&g_fifo);
 8000b20:	483f      	ldr	r0, [pc, #252]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b22:	f7ff fda0 	bl	8000666 <Fifo_pop>
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	483d      	ldr	r0, [pc, #244]	; (8000c24 <ExecuteTimedSequence+0x114>)
 8000b30:	f7ff fd7a 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b34:	483a      	ldr	r0, [pc, #232]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b36:	f7ff fd96 	bl	8000666 <Fifo_pop>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4838      	ldr	r0, [pc, #224]	; (8000c24 <ExecuteTimedSequence+0x114>)
 8000b44:	f7ff fd70 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b48:	4835      	ldr	r0, [pc, #212]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b4a:	f7ff fd8c 	bl	8000666 <Fifo_pop>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4833      	ldr	r0, [pc, #204]	; (8000c24 <ExecuteTimedSequence+0x114>)
 8000b58:	f7ff fd66 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b5c:	4830      	ldr	r0, [pc, #192]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b5e:	f7ff fd82 	bl	8000666 <Fifo_pop>
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <ExecuteTimedSequence+0x114>)
 8000b6c:	f7ff fd5c 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b70:	482b      	ldr	r0, [pc, #172]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b72:	f7ff fd78 	bl	8000666 <Fifo_pop>
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin0Fifo, byte);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	482a      	ldr	r0, [pc, #168]	; (8000c28 <ExecuteTimedSequence+0x118>)
 8000b80:	f7ff fd52 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b84:	4826      	ldr	r0, [pc, #152]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b86:	f7ff fd6e 	bl	8000666 <Fifo_pop>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin1Fifo, byte);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <ExecuteTimedSequence+0x11c>)
 8000b94:	f7ff fd48 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b98:	4821      	ldr	r0, [pc, #132]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000b9a:	f7ff fd64 	bl	8000666 <Fifo_pop>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin2Fifo, byte);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <ExecuteTimedSequence+0x120>)
 8000ba8:	f7ff fd3e 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bac:	481c      	ldr	r0, [pc, #112]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000bae:	f7ff fd5a 	bl	8000666 <Fifo_pop>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin3Fifo, byte);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481e      	ldr	r0, [pc, #120]	; (8000c34 <ExecuteTimedSequence+0x124>)
 8000bbc:	f7ff fd34 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000bc2:	f7ff fd50 	bl	8000666 <Fifo_pop>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin4Fifo, byte);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481a      	ldr	r0, [pc, #104]	; (8000c38 <ExecuteTimedSequence+0x128>)
 8000bd0:	f7ff fd2a 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000bd6:	f7ff fd46 	bl	8000666 <Fifo_pop>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin5Fifo, byte);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4816      	ldr	r0, [pc, #88]	; (8000c3c <ExecuteTimedSequence+0x12c>)
 8000be4:	f7ff fd20 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000bea:	f7ff fd3c 	bl	8000666 <Fifo_pop>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin6Fifo, byte);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <ExecuteTimedSequence+0x130>)
 8000bf8:	f7ff fd16 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <ExecuteTimedSequence+0x110>)
 8000bfe:	f7ff fd32 	bl	8000666 <Fifo_pop>
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin7Fifo, byte);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <ExecuteTimedSequence+0x134>)
 8000c0c:	f7ff fd0c 	bl	8000628 <Fifo_push>

	SendResponse(c_ExecuteTimedSequence);
 8000c10:	20b1      	movs	r0, #177	; 0xb1
 8000c12:	f000 f99d 	bl	8000f50 <SendResponse>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2001d560 	.word	0x2001d560
 8000c24:	2001d578 	.word	0x2001d578
 8000c28:	2001d5d8 	.word	0x2001d5d8
 8000c2c:	2001d5b8 	.word	0x2001d5b8
 8000c30:	2001d598 	.word	0x2001d598
 8000c34:	2001d550 	.word	0x2001d550
 8000c38:	2001d5e8 	.word	0x2001d5e8
 8000c3c:	2001d5a8 	.word	0x2001d5a8
 8000c40:	2001d5c8 	.word	0x2001d5c8
 8000c44:	2001d588 	.word	0x2001d588

08000c48 <SetPersistentState>:

void SetPersistentState()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint8_t state = 0x3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	71fb      	strb	r3, [r7, #7]
	state = Fifo_pop(&g_fifo);
 8000c52:	4833      	ldr	r0, [pc, #204]	; (8000d20 <SetPersistentState+0xd8>)
 8000c54:	f7ff fd07 	bl	8000666 <Fifo_pop>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	4930      	ldr	r1, [pc, #192]	; (8000d24 <SetPersistentState+0xdc>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f9f3 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c6a:	482d      	ldr	r0, [pc, #180]	; (8000d20 <SetPersistentState+0xd8>)
 8000c6c:	f7ff fcfb 	bl	8000666 <Fifo_pop>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	492b      	ldr	r1, [pc, #172]	; (8000d28 <SetPersistentState+0xe0>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f9e7 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c82:	4827      	ldr	r0, [pc, #156]	; (8000d20 <SetPersistentState+0xd8>)
 8000c84:	f7ff fcef 	bl	8000666 <Fifo_pop>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c92:	4925      	ldr	r1, [pc, #148]	; (8000d28 <SetPersistentState+0xe0>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f9db 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c9a:	4821      	ldr	r0, [pc, #132]	; (8000d20 <SetPersistentState+0xd8>)
 8000c9c:	f7ff fce3 	bl	8000666 <Fifo_pop>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	491e      	ldr	r1, [pc, #120]	; (8000d24 <SetPersistentState+0xdc>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f9cf 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <SetPersistentState+0xd8>)
 8000cb4:	f7ff fcd7 	bl	8000666 <Fifo_pop>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	4919      	ldr	r1, [pc, #100]	; (8000d28 <SetPersistentState+0xe0>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f9c3 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000cca:	4815      	ldr	r0, [pc, #84]	; (8000d20 <SetPersistentState+0xd8>)
 8000ccc:	f7ff fccb 	bl	8000666 <Fifo_pop>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cda:	4912      	ldr	r1, [pc, #72]	; (8000d24 <SetPersistentState+0xdc>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f9b7 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000ce2:	480f      	ldr	r0, [pc, #60]	; (8000d20 <SetPersistentState+0xd8>)
 8000ce4:	f7ff fcbf 	bl	8000666 <Fifo_pop>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <SetPersistentState+0xe4>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f9ab 	bl	8001050 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <SetPersistentState+0xd8>)
 8000cfc:	f7ff fcb3 	bl	8000666 <Fifo_pop>
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <SetPersistentState+0xe4>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f99f 	bl	8001050 <SetPin>

	SendResponse(c_SetPersistentState);
 8000d12:	20b2      	movs	r0, #178	; 0xb2
 8000d14:	f000 f91c 	bl	8000f50 <SendResponse>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2001d560 	.word	0x2001d560
 8000d24:	40021400 	.word	0x40021400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40021800 	.word	0x40021800

08000d30 <Release>:

void Release()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	PinReset(TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4815      	ldr	r0, [pc, #84]	; (8000d90 <Release+0x60>)
 8000d3a:	f000 f96b 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <Release+0x64>)
 8000d44:	f000 f966 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <Release+0x64>)
 8000d4e:	f000 f961 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <Release+0x60>)
 8000d58:	f000 f95c 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <Release+0x64>)
 8000d62:	f000 f957 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <Release+0x60>)
 8000d6c:	f000 f952 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <Release+0x68>)
 8000d76:	f000 f94d 	bl	8001014 <PinReset>
	PinReset(TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <Release+0x68>)
 8000d80:	f000 f948 	bl	8001014 <PinReset>

	SendResponse(c_Release);
 8000d84:	20b3      	movs	r0, #179	; 0xb3
 8000d86:	f000 f8e3 	bl	8000f50 <SendResponse>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021400 	.word	0x40021400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40021800 	.word	0x40021800

08000d9c <EndSends>:

void EndSends()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	SendResponse(c_EndSends);
 8000da2:	20b4      	movs	r0, #180	; 0xb4
 8000da4:	f000 f8d4 	bl	8000f50 <SendResponse>

	uint32_t timeDelay = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
	uint8_t byte1 = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	70fb      	strb	r3, [r7, #3]
	uint8_t byte2 = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
	uint8_t byte3 = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	707b      	strb	r3, [r7, #1]
	uint8_t byte4 = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	703b      	strb	r3, [r7, #0]

	//the first time delay will always be zero so there is nothing to pop
	byte1 = Fifo_pop(&timeDelayFifo);
 8000dbc:	4858      	ldr	r0, [pc, #352]	; (8000f20 <EndSends+0x184>)
 8000dbe:	f7ff fc52 	bl	8000666 <Fifo_pop>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	70fb      	strb	r3, [r7, #3]
	byte2 = Fifo_pop(&timeDelayFifo);
 8000dc6:	4856      	ldr	r0, [pc, #344]	; (8000f20 <EndSends+0x184>)
 8000dc8:	f7ff fc4d 	bl	8000666 <Fifo_pop>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	70bb      	strb	r3, [r7, #2]
	byte3 = Fifo_pop(&timeDelayFifo);
 8000dd0:	4853      	ldr	r0, [pc, #332]	; (8000f20 <EndSends+0x184>)
 8000dd2:	f7ff fc48 	bl	8000666 <Fifo_pop>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	707b      	strb	r3, [r7, #1]
	byte4 = Fifo_pop(&timeDelayFifo);
 8000dda:	4851      	ldr	r0, [pc, #324]	; (8000f20 <EndSends+0x184>)
 8000ddc:	f7ff fc43 	bl	8000666 <Fifo_pop>
 8000de0:	4603      	mov	r3, r0
 8000de2:	703b      	strb	r3, [r7, #0]
	timeDelay = (byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1;
 8000de4:	783b      	ldrb	r3, [r7, #0]
 8000de6:	061a      	lsls	r2, r3, #24
 8000de8:	787b      	ldrb	r3, [r7, #1]
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	431a      	orrs	r2, r3
 8000dee:	78bb      	ldrb	r3, [r7, #2]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	431a      	orrs	r2, r3
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	607b      	str	r3, [r7, #4]

	do
	{
		byte1 = Fifo_pop(&g_pin0Fifo);
 8000dfa:	484a      	ldr	r0, [pc, #296]	; (8000f24 <EndSends+0x188>)
 8000dfc:	f7ff fc33 	bl	8000666 <Fifo_pop>
 8000e00:	4603      	mov	r3, r0
 8000e02:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	4947      	ldr	r1, [pc, #284]	; (8000f28 <EndSends+0x18c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f91f 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin1Fifo);
 8000e12:	4846      	ldr	r0, [pc, #280]	; (8000f2c <EndSends+0x190>)
 8000e14:	f7ff fc27 	bl	8000666 <Fifo_pop>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	4943      	ldr	r1, [pc, #268]	; (8000f30 <EndSends+0x194>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f913 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin2Fifo);
 8000e2a:	4842      	ldr	r0, [pc, #264]	; (8000f34 <EndSends+0x198>)
 8000e2c:	f7ff fc1b 	bl	8000666 <Fifo_pop>
 8000e30:	4603      	mov	r3, r0
 8000e32:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3a:	493d      	ldr	r1, [pc, #244]	; (8000f30 <EndSends+0x194>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f907 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin3Fifo);
 8000e42:	483d      	ldr	r0, [pc, #244]	; (8000f38 <EndSends+0x19c>)
 8000e44:	f7ff fc0f 	bl	8000666 <Fifo_pop>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	4935      	ldr	r1, [pc, #212]	; (8000f28 <EndSends+0x18c>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8fb 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin4Fifo);
 8000e5a:	4838      	ldr	r0, [pc, #224]	; (8000f3c <EndSends+0x1a0>)
 8000e5c:	f7ff fc03 	bl	8000666 <Fifo_pop>
 8000e60:	4603      	mov	r3, r0
 8000e62:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6a:	4931      	ldr	r1, [pc, #196]	; (8000f30 <EndSends+0x194>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f8ef 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin5Fifo);
 8000e72:	4833      	ldr	r0, [pc, #204]	; (8000f40 <EndSends+0x1a4>)
 8000e74:	f7ff fbf7 	bl	8000666 <Fifo_pop>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e82:	4929      	ldr	r1, [pc, #164]	; (8000f28 <EndSends+0x18c>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8e3 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin6Fifo);
 8000e8a:	482e      	ldr	r0, [pc, #184]	; (8000f44 <EndSends+0x1a8>)
 8000e8c:	f7ff fbeb 	bl	8000666 <Fifo_pop>
 8000e90:	4603      	mov	r3, r0
 8000e92:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	492b      	ldr	r1, [pc, #172]	; (8000f48 <EndSends+0x1ac>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f8d7 	bl	8001050 <SetPin>

		byte1 = Fifo_pop(&g_pin7Fifo);
 8000ea2:	482a      	ldr	r0, [pc, #168]	; (8000f4c <EndSends+0x1b0>)
 8000ea4:	f7ff fbdf 	bl	8000666 <Fifo_pop>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb2:	4925      	ldr	r1, [pc, #148]	; (8000f48 <EndSends+0x1ac>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f8cb 	bl	8001050 <SetPin>

		if(!Fifo_isEmpty(&timeDelayFifo))
 8000eba:	4819      	ldr	r0, [pc, #100]	; (8000f20 <EndSends+0x184>)
 8000ebc:	f7ff fbf3 	bl	80006a6 <Fifo_isEmpty>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d121      	bne.n	8000f0a <EndSends+0x16e>
		{
			byte1 = Fifo_pop(&timeDelayFifo);
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <EndSends+0x184>)
 8000ec8:	f7ff fbcd 	bl	8000666 <Fifo_pop>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	70fb      	strb	r3, [r7, #3]
			byte2 = Fifo_pop(&timeDelayFifo);
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <EndSends+0x184>)
 8000ed2:	f7ff fbc8 	bl	8000666 <Fifo_pop>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	70bb      	strb	r3, [r7, #2]
			byte3 = Fifo_pop(&timeDelayFifo);
 8000eda:	4811      	ldr	r0, [pc, #68]	; (8000f20 <EndSends+0x184>)
 8000edc:	f7ff fbc3 	bl	8000666 <Fifo_pop>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	707b      	strb	r3, [r7, #1]
			byte4 = Fifo_pop(&timeDelayFifo);
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <EndSends+0x184>)
 8000ee6:	f7ff fbbe 	bl	8000666 <Fifo_pop>
 8000eea:	4603      	mov	r3, r0
 8000eec:	703b      	strb	r3, [r7, #0]
			timeDelay = (byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1;
 8000eee:	783b      	ldrb	r3, [r7, #0]
 8000ef0:	061a      	lsls	r2, r3, #24
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	431a      	orrs	r2, r3
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	607b      	str	r3, [r7, #4]

			HAL_Delay(timeDelay);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fa4d 	bl	80013a4 <HAL_Delay>
		}
	}while(!Fifo_isEmpty(&g_pin0Fifo));
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <EndSends+0x188>)
 8000f0c:	f7ff fbcb 	bl	80006a6 <Fifo_isEmpty>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f43f af71 	beq.w	8000dfa <EndSends+0x5e>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2001d578 	.word	0x2001d578
 8000f24:	2001d5d8 	.word	0x2001d5d8
 8000f28:	40021400 	.word	0x40021400
 8000f2c:	2001d5b8 	.word	0x2001d5b8
 8000f30:	40021000 	.word	0x40021000
 8000f34:	2001d598 	.word	0x2001d598
 8000f38:	2001d550 	.word	0x2001d550
 8000f3c:	2001d5e8 	.word	0x2001d5e8
 8000f40:	2001d5a8 	.word	0x2001d5a8
 8000f44:	2001d5c8 	.word	0x2001d5c8
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	2001d588 	.word	0x2001d588

08000f50 <SendResponse>:

void SendResponse(uint8_t _command)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint8_t response[3];
	response[0] = SyncByte1;
 8000f5a:	23a5      	movs	r3, #165	; 0xa5
 8000f5c:	733b      	strb	r3, [r7, #12]
	response[1] = SyncByte2;
 8000f5e:	23c3      	movs	r3, #195	; 0xc3
 8000f60:	737b      	strb	r3, [r7, #13]
	response[2] = _command;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	73bb      	strb	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, 3, HAL_MAX_DELAY);
 8000f66:	f107 010c 	add.w	r1, r7, #12
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <SendResponse+0x30>)
 8000f72:	f001 fd97 	bl	8002aa4 <HAL_UART_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2001d5f8 	.word	0x2001d5f8

08000f84 <PinHigh>:

void PinHigh(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fb4c 	bl	8001650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(_gpioPort, _gpioPin, GPIO_PIN_SET);
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fce0 	bl	8001984 <HAL_GPIO_WritePin>
}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <PinLow>:

void PinLow(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fb28 	bl	8001650 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(_gpioPort, _gpioPin, GPIO_PIN_RESET);
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fcbc 	bl	8001984 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <PinReset>:

void PinReset(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fb04 	bl	8001650 <HAL_GPIO_Init>
}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SetPin>:

void SetPin(uint8_t state, GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	80bb      	strh	r3, [r7, #4]
	switch(state)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d81d      	bhi.n	80010a2 <SetPin+0x52>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <SetPin+0x1c>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001089 	.word	0x08001089
 8001074:	08001095 	.word	0x08001095
 8001078:	080010a1 	.word	0x080010a1
	{
	case FLOAT:
		PinReset(_gpioPort, _gpioPin);
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	4619      	mov	r1, r3
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff ffc7 	bl	8001014 <PinReset>
		break;
 8001086:	e00c      	b.n	80010a2 <SetPin+0x52>
	case LOW:
		PinLow(_gpioPort, _gpioPin);
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	4619      	mov	r1, r3
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f7ff ff9d 	bl	8000fcc <PinLow>
		break;
 8001092:	e006      	b.n	80010a2 <SetPin+0x52>
	case HIGH:
		PinHigh(_gpioPort, _gpioPin);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	4619      	mov	r1, r3
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f7ff ff73 	bl	8000f84 <PinHigh>
		break;
 800109e:	e000      	b.n	80010a2 <SetPin+0x52>
	case NO_CHANGE:
		break;
 80010a0:	bf00      	nop
	}
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f904 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <USART3_IRQHandler+0x10>)
 8001166:	f001 fdd1 	bl	8002d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2001d5f8 	.word	0x2001d5f8

08001174 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <SystemInit+0x28>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <SystemInit+0x28>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <SystemInit+0x28>)
 800118a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118e:	609a      	str	r2, [r3, #8]
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_USART3_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011e4:	f001 fc10 	bl	8002a08 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f7ff ff5d 	bl	80010ac <Error_Handler>
  }

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2001d5f8 	.word	0x2001d5f8
 80011fc:	40004800 	.word	0x40004800

08001200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_UART_MspInit+0x8c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d130      	bne.n	8001284 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x90>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x90>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_UART_MspInit+0x94>)
 8001270:	f000 f9ee 	bl	8001650 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2027      	movs	r0, #39	; 0x27
 800127a:	f000 f990 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800127e:	2027      	movs	r0, #39	; 0x27
 8001280:	f000 f9a9 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004800 	.word	0x40004800
 8001290:	40023800 	.word	0x40023800
 8001294:	40020c00 	.word	0x40020c00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800129c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800129e:	e003      	b.n	80012a8 <LoopCopyDataInit>

080012a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012a6:	3104      	adds	r1, #4

080012a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b0:	d3f6      	bcc.n	80012a0 <CopyDataInit>
  ldr  r2, =_sbss
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012b4:	e002      	b.n	80012bc <LoopFillZerobss>

080012b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012b8:	f842 3b04 	str.w	r3, [r2], #4

080012bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c0:	d3f9      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012c2:	f7ff ff57 	bl	8001174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f002 fb53 	bl	8003970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fa9b 	bl	8000804 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80012d4:	08003a08 	.word	0x08003a08
  ldr  r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012dc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012e0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012e4:	2001d67c 	.word	0x2001d67c

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>

080012ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 f94a 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f805 	bl	8001304 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012fa:	f7ff fedf 	bl	80010bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f965 	bl	80015f2 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f92d 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	2001d678 	.word	0x2001d678

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2001d678 	.word	0x2001d678

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_Delay+0x40>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000008 	.word	0x20000008

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	05fa0000 	.word	0x05fa0000

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff3e 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff31 	bl	800144c <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2205      	movs	r2, #5
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e169      	b.n	8001944 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8158 	bne.w	800193e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d00b      	beq.n	80016ae <HAL_GPIO_Init+0x5e>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a2:	2b11      	cmp	r3, #17
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d130      	bne.n	8001710 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x100>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b2 	beq.w	800193e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_GPIO_Init+0x308>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <HAL_GPIO_Init+0x308>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_GPIO_Init+0x308>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017f2:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_GPIO_Init+0x30c>)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x310>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02b      	beq.n	8001876 <HAL_GPIO_Init+0x226>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_GPIO_Init+0x314>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d025      	beq.n	8001872 <HAL_GPIO_Init+0x222>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_GPIO_Init+0x318>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01f      	beq.n	800186e <HAL_GPIO_Init+0x21e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_GPIO_Init+0x31c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x21a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4d      	ldr	r2, [pc, #308]	; (8001970 <HAL_GPIO_Init+0x320>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x216>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <HAL_GPIO_Init+0x324>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x212>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_GPIO_Init+0x328>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x20e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_GPIO_Init+0x32c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x20a>
 8001856:	2307      	movs	r3, #7
 8001858:	e00e      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800185a:	2308      	movs	r3, #8
 800185c:	e00c      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800185e:	2306      	movs	r3, #6
 8001860:	e00a      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001862:	2305      	movs	r3, #5
 8001864:	e008      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001866:	2304      	movs	r3, #4
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800186a:	2303      	movs	r3, #3
 800186c:	e004      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800186e:	2302      	movs	r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001876:	2300      	movs	r3, #0
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f002 0203 	and.w	r2, r2, #3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4093      	lsls	r3, r2
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001888:	4934      	ldr	r1, [pc, #208]	; (800195c <HAL_GPIO_Init+0x30c>)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001896:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_GPIO_Init+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ba:	4a31      	ldr	r2, [pc, #196]	; (8001980 <HAL_GPIO_Init+0x330>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x330>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e4:	4a26      	ldr	r2, [pc, #152]	; (8001980 <HAL_GPIO_Init+0x330>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_GPIO_Init+0x330>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_GPIO_Init+0x330>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_GPIO_Init+0x330>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_GPIO_Init+0x330>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	f67f ae92 	bls.w	8001670 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800194c:	bf00      	nop
 800194e:	3724      	adds	r7, #36	; 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40023800 	.word	0x40023800
 800195c:	40013800 	.word	0x40013800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40021400 	.word	0x40021400
 8001978:	40021800 	.word	0x40021800
 800197c:	40021c00 	.word	0x40021c00
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80019d6:	e002      	b.n	80019de <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d8:	887a      	ldrh	r2, [r7, #2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1a:	f7ff fcb7 	bl	800138c <HAL_GetTick>
 8001a1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a20:	e009      	b.n	8001a36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a22:	f7ff fcb3 	bl	800138c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a30:	d901      	bls.n	8001a36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e022      	b.n	8001a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d1ee      	bne.n	8001a22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fc9c 	bl	800138c <HAL_GetTick>
 8001a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a56:	e009      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a58:	f7ff fc98 	bl	800138c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a66:	d901      	bls.n	8001a6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e007      	b.n	8001a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a78:	d1ee      	bne.n	8001a58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e291      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b96      	ldr	r3, [pc, #600]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abc:	4b93      	ldr	r3, [pc, #588]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001ac8:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b8d      	ldr	r3, [pc, #564]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x130>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e26b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x7a>
 8001af8:	4b84      	ldr	r3, [pc, #528]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a83      	ldr	r2, [pc, #524]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x9c>
 8001b0e:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7e      	ldr	r2, [pc, #504]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7b      	ldr	r2, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc0e 	bl	800138c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc0a 	bl	800138c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e21f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe8>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fbfa 	bl	800138c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fbf6 	bl	800138c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e20b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x110>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d069      	beq.n	8001c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1df      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	493d      	ldr	r1, [pc, #244]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e040      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbac 	bl	800138c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fba8 	bl	800138c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1bd      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4929      	ldr	r1, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb88 	bl	800138c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fb84 	bl	800138c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e199      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d038      	beq.n	8001d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fb65 	bl	800138c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fb61 	bl	800138c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e176      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x23a>
 8001ce4:	e01a      	b.n	8001d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb4b 	bl	800138c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fb47 	bl	800138c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d903      	bls.n	8001d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e15c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
 8001d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a4 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a87      	ldr	r2, [pc, #540]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b85      	ldr	r3, [pc, #532]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb0f 	bl	800138c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fb0b 	bl	800138c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e120      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x31a>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x33c>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x35e>
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a5d      	ldr	r2, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fabf 	bl	800138c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fabb 	bl	800138c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0ce      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x386>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff faa9 	bl	800138c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff faa5 	bl	800138c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a4 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d06b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d149      	bne.n	8001f24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fa76 	bl	800138c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fa72 	bl	800138c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fa46 	bl	800138c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa42 	bl	800138c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e057      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x478>
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fa2c 	bl	800138c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fa28 	bl	800138c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4ac>
 8001f56:	e035      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x544>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4965      	ldr	r1, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c8:	f7ff f960 	bl	800138c <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f95c 	bl	800138c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f8bc 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	080039e0 	.word	0x080039e0
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d007      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x32>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d008      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x38>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 808d 	bne.w	80022f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021da:	60bb      	str	r3, [r7, #8]
      break;
 80021dc:	e08c      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021de:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_RCC_GetSysClockFreq+0x160>)
 80021e0:	60bb      	str	r3, [r7, #8]
      break;
 80021e2:	e089      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e4:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ee:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d023      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	f04f 0400 	mov.w	r4, #0
 8002204:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	ea03 0501 	and.w	r5, r3, r1
 8002210:	ea04 0602 	and.w	r6, r4, r2
 8002214:	4a3d      	ldr	r2, [pc, #244]	; (800230c <HAL_RCC_GetSysClockFreq+0x160>)
 8002216:	fb02 f106 	mul.w	r1, r2, r6
 800221a:	2200      	movs	r2, #0
 800221c:	fb02 f205 	mul.w	r2, r2, r5
 8002220:	440a      	add	r2, r1
 8002222:	493a      	ldr	r1, [pc, #232]	; (800230c <HAL_RCC_GetSysClockFreq+0x160>)
 8002224:	fba5 0101 	umull	r0, r1, r5, r1
 8002228:	1853      	adds	r3, r2, r1
 800222a:	4619      	mov	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f04f 0400 	mov.w	r4, #0
 8002232:	461a      	mov	r2, r3
 8002234:	4623      	mov	r3, r4
 8002236:	f7fd fff3 	bl	8000220 <__aeabi_uldivmod>
 800223a:	4603      	mov	r3, r0
 800223c:	460c      	mov	r4, r1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e049      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	ea03 0501 	and.w	r5, r3, r1
 8002258:	ea04 0602 	and.w	r6, r4, r2
 800225c:	4629      	mov	r1, r5
 800225e:	4632      	mov	r2, r6
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	f04f 0400 	mov.w	r4, #0
 8002268:	0154      	lsls	r4, r2, #5
 800226a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800226e:	014b      	lsls	r3, r1, #5
 8002270:	4619      	mov	r1, r3
 8002272:	4622      	mov	r2, r4
 8002274:	1b49      	subs	r1, r1, r5
 8002276:	eb62 0206 	sbc.w	r2, r2, r6
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	f04f 0400 	mov.w	r4, #0
 8002282:	0194      	lsls	r4, r2, #6
 8002284:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002288:	018b      	lsls	r3, r1, #6
 800228a:	1a5b      	subs	r3, r3, r1
 800228c:	eb64 0402 	sbc.w	r4, r4, r2
 8002290:	f04f 0100 	mov.w	r1, #0
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	00e2      	lsls	r2, r4, #3
 800229a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800229e:	00d9      	lsls	r1, r3, #3
 80022a0:	460b      	mov	r3, r1
 80022a2:	4614      	mov	r4, r2
 80022a4:	195b      	adds	r3, r3, r5
 80022a6:	eb44 0406 	adc.w	r4, r4, r6
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	02a2      	lsls	r2, r4, #10
 80022b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022b8:	0299      	lsls	r1, r3, #10
 80022ba:	460b      	mov	r3, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	4621      	mov	r1, r4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0400 	mov.w	r4, #0
 80022c8:	461a      	mov	r2, r3
 80022ca:	4623      	mov	r3, r4
 80022cc:	f7fd ffa8 	bl	8000220 <__aeabi_uldivmod>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_GetSysClockFreq+0x158>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	3301      	adds	r3, #1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	60bb      	str	r3, [r7, #8]
      break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f8:	68bb      	ldr	r3, [r7, #8]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	00f42400 	.word	0x00f42400
 800230c:	017d7840 	.word	0x017d7840

08002310 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4601      	mov	r1, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	080039f0 	.word	0x080039f0

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffdc 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002358:	4601      	mov	r1, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0b5b      	lsrs	r3, r3, #13
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4a03      	ldr	r2, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	080039f0 	.word	0x080039f0

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239c:	4b65      	ldr	r3, [pc, #404]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a64      	ldr	r2, [pc, #400]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023a6:	6093      	str	r3, [r2, #8]
 80023a8:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	4960      	ldr	r1, [pc, #384]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ce:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	4955      	ldr	r1, [pc, #340]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ec:	d101      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800240c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002410:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	4946      	ldr	r1, [pc, #280]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002428:	d101      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 808b 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a34      	ldr	r2, [pc, #208]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe ff8e 	bl	800138c <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe ff8a 	bl	800138c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e2ba      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d035      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d02e      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d114      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe ff52 	bl	800138c <HAL_GetTick>
 80024e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe ff4e 	bl	800138c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e27c      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800251a:	d111      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800252a:	400b      	ands	r3, r1
 800252c:	4901      	ldr	r1, [pc, #4]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
 8002532:	e00b      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	0ffffcff 	.word	0x0ffffcff
 8002540:	4ba3      	ldr	r3, [pc, #652]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4aa2      	ldr	r2, [pc, #648]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002546:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	4ba0      	ldr	r3, [pc, #640]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800254e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	499d      	ldr	r1, [pc, #628]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800255a:	4313      	orrs	r3, r2
 800255c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800256a:	4b99      	ldr	r3, [pc, #612]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002570:	4a97      	ldr	r2, [pc, #604]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800257a:	4b95      	ldr	r3, [pc, #596]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800257c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4992      	ldr	r1, [pc, #584]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002598:	4b8d      	ldr	r3, [pc, #564]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	498a      	ldr	r1, [pc, #552]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	4981      	ldr	r1, [pc, #516]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025dc:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ea:	4979      	ldr	r1, [pc, #484]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025fe:	4b74      	ldr	r3, [pc, #464]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f023 0203 	bic.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	4970      	ldr	r1, [pc, #448]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002620:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f023 020c 	bic.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4968      	ldr	r1, [pc, #416]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	495f      	ldr	r1, [pc, #380]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002672:	4957      	ldr	r1, [pc, #348]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002686:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	494e      	ldr	r1, [pc, #312]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026a8:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	4946      	ldr	r1, [pc, #280]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	493d      	ldr	r1, [pc, #244]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d011      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	492c      	ldr	r1, [pc, #176]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d101      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274c:	4920      	ldr	r1, [pc, #128]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276e:	4918      	ldr	r1, [pc, #96]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002790:	490f      	ldr	r1, [pc, #60]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x432>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a6:	f040 809c 	bne.w	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80027b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fde9 	bl	800138c <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fe fde5 	bl	800138c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d903      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e115      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
 80027d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d4:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d113      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027f4:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	0e1b      	lsrs	r3, r3, #24
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	019a      	lsls	r2, r3, #6
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	071b      	lsls	r3, r3, #28
 8002814:	497b      	ldr	r1, [pc, #492]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d11f      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002848:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	4966      	ldr	r1, [pc, #408]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002870:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002876:	f023 021f 	bic.w	r2, r3, #31
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	3b01      	subs	r3, #1
 8002880:	4960      	ldr	r1, [pc, #384]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	019a      	lsls	r2, r3, #6
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	071b      	lsls	r3, r3, #28
 80028a8:	4956      	ldr	r1, [pc, #344]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b0:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fd66 	bl	800138c <HAL_GetTick>
 80028c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c4:	f7fe fd62 	bl	800138c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e092      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 8088 	bne.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f6:	f7fe fd49 	bl	800138c <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028fe:	f7fe fd45 	bl	800138c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e075      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d0ef      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	2b00      	cmp	r3, #0
 8002944:	d120      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	019a      	lsls	r2, r3, #6
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	4927      	ldr	r1, [pc, #156]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	3b01      	subs	r3, #1
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	4920      	ldr	r1, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d018      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299c:	d113      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	0e1b      	lsrs	r3, r3, #24
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	019a      	lsls	r2, r3, #6
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	431a      	orrs	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	4911      	ldr	r1, [pc, #68]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d2:	f7fe fcdb 	bl	800138c <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029da:	f7fe fcd7 	bl	800138c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e007      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f8:	d1ef      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e040      	b.n	8002a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fbe8 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 faa6 	bl	8002f98 <UART_SetConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fd44 	bl	80034ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fdcb 	bl	8003630 <UART_CheckIdleState>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d17f      	bne.n	8002bbc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Transmit+0x24>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e078      	b.n	8002bbe <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Transmit+0x36>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e071      	b.n	8002bbe <HAL_UART_Transmit+0x11a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002aee:	f7fe fc4d 	bl	800138c <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d108      	bne.n	8002b20 <HAL_UART_Transmit+0x7c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e003      	b.n	8002b28 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002b30:	e02c      	b.n	8002b8c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fda6 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e038      	b.n	8002bbe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	3302      	adds	r3, #2
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e007      	b.n	8002b7a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1cc      	bne.n	8002b32 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fd73 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e005      	b.n	8002bbe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	f040 808a 	bne.w	8002cf4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_UART_Receive_IT+0x24>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e082      	b.n	8002cf6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Receive_IT+0x36>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e07b      	b.n	8002cf6 <HAL_UART_Receive_IT+0x12e>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d10e      	bne.n	8002c4a <HAL_UART_Receive_IT+0x82>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_UART_Receive_IT+0x78>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c3e:	e02d      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c48:	e028      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_UART_Receive_IT+0xa6>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_UART_Receive_IT+0x9c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c62:	e01b      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	227f      	movs	r2, #127	; 0x7f
 8002c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c6c:	e016      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c76:	d10d      	bne.n	8002c94 <HAL_UART_Receive_IT+0xcc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_UART_Receive_IT+0xc2>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	227f      	movs	r2, #127	; 0x7f
 8002c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c88:	e008      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	223f      	movs	r2, #63	; 0x3f
 8002c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c92:	e003      	b.n	8002c9c <HAL_UART_Receive_IT+0xd4>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2222      	movs	r2, #34	; 0x22
 8002ca6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d107      	bne.n	8002cd2 <HAL_UART_Receive_IT+0x10a>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_UART_Receive_IT+0x13c>)
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60
 8002cd0:	e002      	b.n	8002cd8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_UART_Receive_IT+0x140>)
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002cee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	080038c9 	.word	0x080038c9
 8002d08:	08003823 	.word	0x08003823

08002d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d113      	bne.n	8002d64 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8100 	beq.w	8002f5a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
      }
      return;
 8002d62:	e0fa      	b.n	8002f5a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80d5 	beq.w	8002f16 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ca 	beq.w	8002f16 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <HAL_UART_IRQHandler+0x9e>
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xc6>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <HAL_UART_IRQHandler+0xee>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2204      	movs	r2, #4
 8002dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	f043 0208 	orr.w	r2, r3, #8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00f      	beq.n	8002e56 <HAL_UART_IRQHandler+0x14a>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d07f      	beq.n	8002f5e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d004      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fc6f 	bl	8003784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d123      	bne.n	8002efc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_UART_IRQHandler+0x260>)
 8002ed2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fb96 	bl	800160a <HAL_DMA_Abort_IT>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef2:	e00e      	b.n	8002f12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f845 	bl	8002f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efa:	e00a      	b.n	8002f12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f841 	bl	8002f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f02:	e006      	b.n	8002f12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f83d 	bl	8002f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002f10:	e025      	b.n	8002f5e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f12:	bf00      	nop
    return;
 8002f14:	e023      	b.n	8002f5e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
    }
    return;
 8002f3a:	e012      	b.n	8002f62 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <HAL_UART_IRQHandler+0x258>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fc4d 	bl	80037f0 <UART_EndTransmit_IT>
    return;
 8002f56:	bf00      	nop
 8002f58:	e004      	b.n	8002f64 <HAL_UART_IRQHandler+0x258>
      return;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <HAL_UART_IRQHandler+0x258>
    return;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_UART_IRQHandler+0x258>
    return;
 8002f62:	bf00      	nop
  }

}
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	080037c5 	.word	0x080037c5

08002f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4bb1      	ldr	r3, [pc, #708]	; (800328c <UART_SetConfig+0x2f4>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	6939      	ldr	r1, [r7, #16]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a9f      	ldr	r2, [pc, #636]	; (8003290 <UART_SetConfig+0x2f8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d121      	bne.n	800305c <UART_SetConfig+0xc4>
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <UART_SetConfig+0x2fc>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b03      	cmp	r3, #3
 8003024:	d816      	bhi.n	8003054 <UART_SetConfig+0xbc>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0x94>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	0800303d 	.word	0x0800303d
 8003030:	08003049 	.word	0x08003049
 8003034:	08003043 	.word	0x08003043
 8003038:	0800304f 	.word	0x0800304f
 800303c:	2301      	movs	r3, #1
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e151      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003042:	2302      	movs	r3, #2
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e14e      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003048:	2304      	movs	r3, #4
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e14b      	b.n	80032e6 <UART_SetConfig+0x34e>
 800304e:	2308      	movs	r3, #8
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e148      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003054:	2310      	movs	r3, #16
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	bf00      	nop
 800305a:	e144      	b.n	80032e6 <UART_SetConfig+0x34e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8d      	ldr	r2, [pc, #564]	; (8003298 <UART_SetConfig+0x300>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d134      	bne.n	80030d0 <UART_SetConfig+0x138>
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <UART_SetConfig+0x2fc>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d829      	bhi.n	80030c8 <UART_SetConfig+0x130>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0xe4>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030c9 	.word	0x080030c9
 8003084:	080030c9 	.word	0x080030c9
 8003088:	080030c9 	.word	0x080030c9
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080030c9 	.word	0x080030c9
 800309c:	080030b7 	.word	0x080030b7
 80030a0:	080030c9 	.word	0x080030c9
 80030a4:	080030c9 	.word	0x080030c9
 80030a8:	080030c9 	.word	0x080030c9
 80030ac:	080030c3 	.word	0x080030c3
 80030b0:	2300      	movs	r3, #0
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e117      	b.n	80032e6 <UART_SetConfig+0x34e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e114      	b.n	80032e6 <UART_SetConfig+0x34e>
 80030bc:	2304      	movs	r3, #4
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e111      	b.n	80032e6 <UART_SetConfig+0x34e>
 80030c2:	2308      	movs	r3, #8
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e10e      	b.n	80032e6 <UART_SetConfig+0x34e>
 80030c8:	2310      	movs	r3, #16
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	bf00      	nop
 80030ce:	e10a      	b.n	80032e6 <UART_SetConfig+0x34e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a71      	ldr	r2, [pc, #452]	; (800329c <UART_SetConfig+0x304>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d120      	bne.n	800311c <UART_SetConfig+0x184>
 80030da:	4b6e      	ldr	r3, [pc, #440]	; (8003294 <UART_SetConfig+0x2fc>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d00f      	beq.n	8003108 <UART_SetConfig+0x170>
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d802      	bhi.n	80030f2 <UART_SetConfig+0x15a>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <UART_SetConfig+0x164>
 80030f0:	e010      	b.n	8003114 <UART_SetConfig+0x17c>
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d005      	beq.n	8003102 <UART_SetConfig+0x16a>
 80030f6:	2b30      	cmp	r3, #48	; 0x30
 80030f8:	d009      	beq.n	800310e <UART_SetConfig+0x176>
 80030fa:	e00b      	b.n	8003114 <UART_SetConfig+0x17c>
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e0f1      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e0ee      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e0eb      	b.n	80032e6 <UART_SetConfig+0x34e>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e0e8      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	bf00      	nop
 800311a:	e0e4      	b.n	80032e6 <UART_SetConfig+0x34e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5f      	ldr	r2, [pc, #380]	; (80032a0 <UART_SetConfig+0x308>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d120      	bne.n	8003168 <UART_SetConfig+0x1d0>
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <UART_SetConfig+0x2fc>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d00f      	beq.n	8003154 <UART_SetConfig+0x1bc>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d802      	bhi.n	800313e <UART_SetConfig+0x1a6>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <UART_SetConfig+0x1b0>
 800313c:	e010      	b.n	8003160 <UART_SetConfig+0x1c8>
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d005      	beq.n	800314e <UART_SetConfig+0x1b6>
 8003142:	2bc0      	cmp	r3, #192	; 0xc0
 8003144:	d009      	beq.n	800315a <UART_SetConfig+0x1c2>
 8003146:	e00b      	b.n	8003160 <UART_SetConfig+0x1c8>
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0cb      	b.n	80032e6 <UART_SetConfig+0x34e>
 800314e:	2302      	movs	r3, #2
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e0c8      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003154:	2304      	movs	r3, #4
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0c5      	b.n	80032e6 <UART_SetConfig+0x34e>
 800315a:	2308      	movs	r3, #8
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e0c2      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	bf00      	nop
 8003166:	e0be      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4d      	ldr	r2, [pc, #308]	; (80032a4 <UART_SetConfig+0x30c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d124      	bne.n	80031bc <UART_SetConfig+0x224>
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <UART_SetConfig+0x2fc>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d012      	beq.n	80031a8 <UART_SetConfig+0x210>
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d802      	bhi.n	800318e <UART_SetConfig+0x1f6>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <UART_SetConfig+0x204>
 800318c:	e012      	b.n	80031b4 <UART_SetConfig+0x21c>
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d006      	beq.n	80031a2 <UART_SetConfig+0x20a>
 8003194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003198:	d009      	beq.n	80031ae <UART_SetConfig+0x216>
 800319a:	e00b      	b.n	80031b4 <UART_SetConfig+0x21c>
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e0a1      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e09e      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031a8:	2304      	movs	r3, #4
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e09b      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031ae:	2308      	movs	r3, #8
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e098      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031b4:	2310      	movs	r3, #16
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	bf00      	nop
 80031ba:	e094      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a39      	ldr	r2, [pc, #228]	; (80032a8 <UART_SetConfig+0x310>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d124      	bne.n	8003210 <UART_SetConfig+0x278>
 80031c6:	4b33      	ldr	r3, [pc, #204]	; (8003294 <UART_SetConfig+0x2fc>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d4:	d012      	beq.n	80031fc <UART_SetConfig+0x264>
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d802      	bhi.n	80031e2 <UART_SetConfig+0x24a>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <UART_SetConfig+0x258>
 80031e0:	e012      	b.n	8003208 <UART_SetConfig+0x270>
 80031e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e6:	d006      	beq.n	80031f6 <UART_SetConfig+0x25e>
 80031e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ec:	d009      	beq.n	8003202 <UART_SetConfig+0x26a>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x270>
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e077      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e074      	b.n	80032e6 <UART_SetConfig+0x34e>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e071      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e06e      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	bf00      	nop
 800320e:	e06a      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <UART_SetConfig+0x314>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d124      	bne.n	8003264 <UART_SetConfig+0x2cc>
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <UART_SetConfig+0x2fc>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d012      	beq.n	8003250 <UART_SetConfig+0x2b8>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322e:	d802      	bhi.n	8003236 <UART_SetConfig+0x29e>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <UART_SetConfig+0x2ac>
 8003234:	e012      	b.n	800325c <UART_SetConfig+0x2c4>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d006      	beq.n	800324a <UART_SetConfig+0x2b2>
 800323c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003240:	d009      	beq.n	8003256 <UART_SetConfig+0x2be>
 8003242:	e00b      	b.n	800325c <UART_SetConfig+0x2c4>
 8003244:	2300      	movs	r3, #0
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e04d      	b.n	80032e6 <UART_SetConfig+0x34e>
 800324a:	2302      	movs	r3, #2
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e04a      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003250:	2304      	movs	r3, #4
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e047      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003256:	2308      	movs	r3, #8
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e044      	b.n	80032e6 <UART_SetConfig+0x34e>
 800325c:	2310      	movs	r3, #16
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	bf00      	nop
 8003262:	e040      	b.n	80032e6 <UART_SetConfig+0x34e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <UART_SetConfig+0x318>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d139      	bne.n	80032e2 <UART_SetConfig+0x34a>
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <UART_SetConfig+0x2fc>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327c:	d027      	beq.n	80032ce <UART_SetConfig+0x336>
 800327e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003282:	d817      	bhi.n	80032b4 <UART_SetConfig+0x31c>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01c      	beq.n	80032c2 <UART_SetConfig+0x32a>
 8003288:	e027      	b.n	80032da <UART_SetConfig+0x342>
 800328a:	bf00      	nop
 800328c:	efff69f3 	.word	0xefff69f3
 8003290:	40011000 	.word	0x40011000
 8003294:	40023800 	.word	0x40023800
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40004c00 	.word	0x40004c00
 80032a4:	40005000 	.word	0x40005000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	40007800 	.word	0x40007800
 80032b0:	40007c00 	.word	0x40007c00
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d006      	beq.n	80032c8 <UART_SetConfig+0x330>
 80032ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032be:	d009      	beq.n	80032d4 <UART_SetConfig+0x33c>
 80032c0:	e00b      	b.n	80032da <UART_SetConfig+0x342>
 80032c2:	2300      	movs	r3, #0
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e00e      	b.n	80032e6 <UART_SetConfig+0x34e>
 80032c8:	2302      	movs	r3, #2
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e00b      	b.n	80032e6 <UART_SetConfig+0x34e>
 80032ce:	2304      	movs	r3, #4
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e008      	b.n	80032e6 <UART_SetConfig+0x34e>
 80032d4:	2308      	movs	r3, #8
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x34e>
 80032da:	2310      	movs	r3, #16
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	bf00      	nop
 80032e0:	e001      	b.n	80032e6 <UART_SetConfig+0x34e>
 80032e2:	2310      	movs	r3, #16
 80032e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ee:	d17f      	bne.n	80033f0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d85c      	bhi.n	80033b0 <UART_SetConfig+0x418>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0x364>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003341 	.word	0x08003341
 8003304:	08003361 	.word	0x08003361
 8003308:	080033b1 	.word	0x080033b1
 800330c:	08003379 	.word	0x08003379
 8003310:	080033b1 	.word	0x080033b1
 8003314:	080033b1 	.word	0x080033b1
 8003318:	080033b1 	.word	0x080033b1
 800331c:	08003399 	.word	0x08003399
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7ff f802 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	005a      	lsls	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	b29b      	uxth	r3, r3
 800333c:	61bb      	str	r3, [r7, #24]
        break;
 800333e:	e03a      	b.n	80033b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003340:	f7ff f806 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8003344:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	005a      	lsls	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	61bb      	str	r3, [r7, #24]
        break;
 800335e:	e02a      	b.n	80033b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	085a      	lsrs	r2, r3, #1
 8003366:	4b5f      	ldr	r3, [pc, #380]	; (80034e4 <UART_SetConfig+0x54c>)
 8003368:	4413      	add	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6852      	ldr	r2, [r2, #4]
 800336e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	61bb      	str	r3, [r7, #24]
        break;
 8003376:	e01e      	b.n	80033b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003378:	f7fe ff18 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800337c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	005a      	lsls	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	61bb      	str	r3, [r7, #24]
        break;
 8003396:	e00e      	b.n	80033b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	61bb      	str	r3, [r7, #24]
        break;
 80033ae:	e002      	b.n	80033b6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
        break;
 80033b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d916      	bls.n	80033ea <UART_SetConfig+0x452>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d212      	bcs.n	80033ea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	b29a      	uxth	r2, r3
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	4313      	orrs	r3, r2
 80033de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	897a      	ldrh	r2, [r7, #10]
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	e070      	b.n	80034cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e06d      	b.n	80034cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d859      	bhi.n	80034aa <UART_SetConfig+0x512>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0x464>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003421 	.word	0x08003421
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800345d 	.word	0x0800345d
 8003408:	080034ab 	.word	0x080034ab
 800340c:	08003475 	.word	0x08003475
 8003410:	080034ab 	.word	0x080034ab
 8003414:	080034ab 	.word	0x080034ab
 8003418:	080034ab 	.word	0x080034ab
 800341c:	08003493 	.word	0x08003493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe ff82 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	085a      	lsrs	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	441a      	add	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	b29b      	uxth	r3, r3
 800343a:	61bb      	str	r3, [r7, #24]
        break;
 800343c:	e038      	b.n	80034b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800343e:	f7fe ff87 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8003442:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085a      	lsrs	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	61bb      	str	r3, [r7, #24]
        break;
 800345a:	e029      	b.n	80034b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	085a      	lsrs	r2, r3, #1
 8003462:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <UART_SetConfig+0x550>)
 8003464:	4413      	add	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6852      	ldr	r2, [r2, #4]
 800346a:	fbb3 f3f2 	udiv	r3, r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	61bb      	str	r3, [r7, #24]
        break;
 8003472:	e01d      	b.n	80034b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003474:	f7fe fe9a 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8003478:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085a      	lsrs	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e00e      	b.n	80034b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	61bb      	str	r3, [r7, #24]
        break;
 80034a8:	e002      	b.n	80034b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
        break;
 80034ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d908      	bls.n	80034c8 <UART_SetConfig+0x530>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d204      	bcs.n	80034c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	01e84800 	.word	0x01e84800
 80034e8:	00f42400 	.word	0x00f42400

080034ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01a      	beq.n	8003602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ea:	d10a      	bne.n	8003602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800363e:	f7fd fea5 	bl	800138c <HAL_GetTick>
 8003642:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d10e      	bne.n	8003670 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f814 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e00a      	b.n	8003686 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	e05d      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d059      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	f7fd fe70 	bl	800138c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <UART_WaitOnFlagUntilTimeout+0x30>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11b      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e042      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02b      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003712:	d123      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800371c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800372c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00f      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d092      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fbce 	bl	8002f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fbab 	bl	8002f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003830:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	2b22      	cmp	r3, #34	; 0x22
 8003838:	d13a      	bne.n	80038b0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003842:	89bb      	ldrh	r3, [r7, #12]
 8003844:	b2d9      	uxtb	r1, r3
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	400a      	ands	r2, r1
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d121      	bne.n	80038c0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800388a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fd f913 	bl	8000ad4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038ae:	e007      	b.n	80038c0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	619a      	str	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038dc:	2b22      	cmp	r3, #34	; 0x22
 80038de:	d13a      	bne.n	8003956 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80038ee:	89ba      	ldrh	r2, [r7, #12]
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d121      	bne.n	8003966 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003930:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd f8c0 	bl	8000ad4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003954:	e007      	b.n	8003966 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0208 	orr.w	r2, r2, #8
 8003964:	619a      	str	r2, [r3, #24]
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <__libc_init_array>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4e0d      	ldr	r6, [pc, #52]	; (80039a8 <__libc_init_array+0x38>)
 8003974:	4c0d      	ldr	r4, [pc, #52]	; (80039ac <__libc_init_array+0x3c>)
 8003976:	1ba4      	subs	r4, r4, r6
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	2500      	movs	r5, #0
 800397c:	42a5      	cmp	r5, r4
 800397e:	d109      	bne.n	8003994 <__libc_init_array+0x24>
 8003980:	4e0b      	ldr	r6, [pc, #44]	; (80039b0 <__libc_init_array+0x40>)
 8003982:	4c0c      	ldr	r4, [pc, #48]	; (80039b4 <__libc_init_array+0x44>)
 8003984:	f000 f820 	bl	80039c8 <_init>
 8003988:	1ba4      	subs	r4, r4, r6
 800398a:	10a4      	asrs	r4, r4, #2
 800398c:	2500      	movs	r5, #0
 800398e:	42a5      	cmp	r5, r4
 8003990:	d105      	bne.n	800399e <__libc_init_array+0x2e>
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003998:	4798      	blx	r3
 800399a:	3501      	adds	r5, #1
 800399c:	e7ee      	b.n	800397c <__libc_init_array+0xc>
 800399e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a2:	4798      	blx	r3
 80039a4:	3501      	adds	r5, #1
 80039a6:	e7f2      	b.n	800398e <__libc_init_array+0x1e>
 80039a8:	08003a00 	.word	0x08003a00
 80039ac:	08003a00 	.word	0x08003a00
 80039b0:	08003a00 	.word	0x08003a00
 80039b4:	08003a04 	.word	0x08003a04

080039b8 <memset>:
 80039b8:	4402      	add	r2, r0
 80039ba:	4603      	mov	r3, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	d100      	bne.n	80039c2 <memset+0xa>
 80039c0:	4770      	bx	lr
 80039c2:	f803 1b01 	strb.w	r1, [r3], #1
 80039c6:	e7f9      	b.n	80039bc <memset+0x4>

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
