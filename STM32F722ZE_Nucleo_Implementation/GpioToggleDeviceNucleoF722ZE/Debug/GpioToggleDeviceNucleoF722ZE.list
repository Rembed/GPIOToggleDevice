
GpioToggleDeviceNucleoF722ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003964  08003964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800396c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d670  2000000c  08003978  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d67c  08003978  0002d67c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  00029602  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002b050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020eb1  00000000  00000000  0002c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008304  00000000  00000000  0004ced9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd78e  00000000  00000000  000551dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012296b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  001229e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800392c 	.word	0x0800392c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	0800392c 	.word	0x0800392c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CommandParser_init>:
void CommandParser_init(
		struct CommandParser* this,
		struct Fifo* _fifo,
		uint8_t _syncByte1,
		uint8_t _syncByte2)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	4611      	mov	r1, r2
 800052c:	461a      	mov	r2, r3
 800052e:	460b      	mov	r3, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	this->m_fifo = _fifo;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
	this->m_syncByte1 = _syncByte1;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	711a      	strb	r2, [r3, #4]
	this->m_syncByte2 = _syncByte2;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	79ba      	ldrb	r2, [r7, #6]
 8000546:	715a      	strb	r2, [r3, #5]

	this->m_syncByte1Flag = 0;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2200      	movs	r2, #0
 800054c:	719a      	strb	r2, [r3, #6]
	this->m_syncByte2Flag = 0;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	71da      	strb	r2, [r3, #7]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <CommandParser_getCommand>:


uint8_t CommandParser_getCommand(
		struct CommandParser* this)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	if(!Fifo_isEmpty(this->m_fifo))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f89a 	bl	80006a6 <Fifo_isEmpty>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d13a      	bne.n	80005ee <CommandParser_getCommand+0x8e>
	{
		byte = Fifo_pop(this->m_fifo);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f872 	bl	8000666 <Fifo_pop>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

		if(byte == this->m_syncByte1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	429a      	cmp	r2, r3
 800058e:	d107      	bne.n	80005a0 <CommandParser_getCommand+0x40>
				&& !this->m_syncByte1Flag)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d103      	bne.n	80005a0 <CommandParser_getCommand+0x40>
		{
			this->m_syncByte1Flag = 1;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	719a      	strb	r2, [r3, #6]
 800059e:	e026      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(byte == this->m_syncByte2
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10b      	bne.n	80005c2 <CommandParser_getCommand+0x62>
				&& this->m_syncByte1Flag
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d007      	beq.n	80005c2 <CommandParser_getCommand+0x62>
				&& !this->m_syncByte2Flag)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	79db      	ldrb	r3, [r3, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <CommandParser_getCommand+0x62>
		{
			this->m_syncByte2Flag = 1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	71da      	strb	r2, [r3, #7]
 80005c0:	e015      	b.n	80005ee <CommandParser_getCommand+0x8e>
		}

		else if(this->m_syncByte1Flag && this->m_syncByte2Flag)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00b      	beq.n	80005e2 <CommandParser_getCommand+0x82>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <CommandParser_getCommand+0x82>
		{
			this->m_syncByte1Flag = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	71da      	strb	r2, [r3, #7]
			return byte;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	e006      	b.n	80005f0 <CommandParser_getCommand+0x90>
		}

		else
		{
			this->m_syncByte1Flag = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	719a      	strb	r2, [r3, #6]
			this->m_syncByte2Flag = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	71da      	strb	r2, [r3, #7]
		}
	}
	return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Fifo_init>:

void Fifo_init(
		struct Fifo* this,
		uint8_t* _buffer,
		uint32_t _bufferLength)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	this->m_buffer = _buffer;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	601a      	str	r2, [r3, #0]
	this->m_bufferLength = _bufferLength;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
	this->m_head = 0;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	this->m_tail = 0;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <Fifo_push>:

void Fifo_push(
		struct Fifo* this,
		uint8_t _byte)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	this->m_buffer[this->m_head] = _byte;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4413      	add	r3, r2
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	701a      	strb	r2, [r3, #0]

	this->m_head = (this->m_head + 1) % this->m_bufferLength;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000650:	fb02 f201 	mul.w	r2, r2, r1
 8000654:	1a9a      	subs	r2, r3, r2
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <Fifo_pop>:

uint8_t Fifo_pop(
		struct Fifo* this)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	uint8_t retByte = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]

	retByte = this->m_buffer[this->m_tail];
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	73fb      	strb	r3, [r7, #15]
	this->m_tail = (this->m_tail + 1) % this->m_bufferLength;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6852      	ldr	r2, [r2, #4]
 800068a:	fbb3 f1f2 	udiv	r1, r3, r2
 800068e:	fb02 f201 	mul.w	r2, r2, r1
 8000692:	1a9a      	subs	r2, r3, r2
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]

	return retByte;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <Fifo_isEmpty>:

uint8_t Fifo_isEmpty(
		struct Fifo* this)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	return this->m_head == this->m_tail;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	bf0c      	ite	eq
 80006ba:	2301      	moveq	r3, #1
 80006bc:	2300      	movne	r3, #0
 80006be:	b2db      	uxtb	r3, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a42      	ldr	r2, [pc, #264]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <MX_GPIO_Init+0x124>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a36      	ldr	r2, [pc, #216]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x124>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0x124>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0x124>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	481f      	ldr	r0, [pc, #124]	; (80007f4 <MX_GPIO_Init+0x128>)
 8000778:	f001 f8d0 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_0_Pin|TOGGLE_PIN_3_Pin|TOGGLE_PIN_5_Pin;
 800077c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000792:	f000 ff29 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_1_Pin|TOGGLE_PIN_2_Pin|TOGGLE_PIN_4_Pin;
 8000796:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_GPIO_Init+0x130>)
 80007ac:	f000 ff1c 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = TOGGLE_PIN_7_Pin|TOGGLE_PIN_6_Pin;
 80007b0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_GPIO_Init+0x134>)
 80007c6:	f000 ff0f 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0x128>)
 80007e2:	f000 ff01 	bl	80015e8 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021000 	.word	0x40021000
 8000800:	40021800 	.word	0x40021800

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fd3b 	bl	8001282 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8c2 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff ff5c 	bl	80006cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000814:	f000 fc90 	bl	8001138 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Fifo_init(&g_fifo, FifoBuffer, 100);
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	4946      	ldr	r1, [pc, #280]	; (8000934 <main+0x130>)
 800081c:	4846      	ldr	r0, [pc, #280]	; (8000938 <main+0x134>)
 800081e:	f7ff feeb 	bl	80005f8 <Fifo_init>
  CommandParser_init(&g_commandParser, &g_fifo, SyncByte1, SyncByte2);
 8000822:	23c3      	movs	r3, #195	; 0xc3
 8000824:	22a5      	movs	r2, #165	; 0xa5
 8000826:	4944      	ldr	r1, [pc, #272]	; (8000938 <main+0x134>)
 8000828:	4844      	ldr	r0, [pc, #272]	; (800093c <main+0x138>)
 800082a:	f7ff fe79 	bl	8000520 <CommandParser_init>

  Fifo_init(&g_pin0Fifo, pin0StateBuffer, COMMANDLENGTH);
 800082e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000832:	4943      	ldr	r1, [pc, #268]	; (8000940 <main+0x13c>)
 8000834:	4843      	ldr	r0, [pc, #268]	; (8000944 <main+0x140>)
 8000836:	f7ff fedf 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin1Fifo, pin1StateBuffer, COMMANDLENGTH);
 800083a:	f242 7210 	movw	r2, #10000	; 0x2710
 800083e:	4942      	ldr	r1, [pc, #264]	; (8000948 <main+0x144>)
 8000840:	4842      	ldr	r0, [pc, #264]	; (800094c <main+0x148>)
 8000842:	f7ff fed9 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin2Fifo, pin2StateBuffer, COMMANDLENGTH);
 8000846:	f242 7210 	movw	r2, #10000	; 0x2710
 800084a:	4941      	ldr	r1, [pc, #260]	; (8000950 <main+0x14c>)
 800084c:	4841      	ldr	r0, [pc, #260]	; (8000954 <main+0x150>)
 800084e:	f7ff fed3 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin3Fifo, pin3StateBuffer, COMMANDLENGTH);
 8000852:	f242 7210 	movw	r2, #10000	; 0x2710
 8000856:	4940      	ldr	r1, [pc, #256]	; (8000958 <main+0x154>)
 8000858:	4840      	ldr	r0, [pc, #256]	; (800095c <main+0x158>)
 800085a:	f7ff fecd 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin4Fifo, pin4StateBuffer, COMMANDLENGTH);
 800085e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000862:	493f      	ldr	r1, [pc, #252]	; (8000960 <main+0x15c>)
 8000864:	483f      	ldr	r0, [pc, #252]	; (8000964 <main+0x160>)
 8000866:	f7ff fec7 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin5Fifo, pin5StateBuffer, COMMANDLENGTH);
 800086a:	f242 7210 	movw	r2, #10000	; 0x2710
 800086e:	493e      	ldr	r1, [pc, #248]	; (8000968 <main+0x164>)
 8000870:	483e      	ldr	r0, [pc, #248]	; (800096c <main+0x168>)
 8000872:	f7ff fec1 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin6Fifo, pin6StateBuffer, COMMANDLENGTH);
 8000876:	f242 7210 	movw	r2, #10000	; 0x2710
 800087a:	493d      	ldr	r1, [pc, #244]	; (8000970 <main+0x16c>)
 800087c:	483d      	ldr	r0, [pc, #244]	; (8000974 <main+0x170>)
 800087e:	f7ff febb 	bl	80005f8 <Fifo_init>
  Fifo_init(&g_pin7Fifo, pin7StateBuffer, COMMANDLENGTH);
 8000882:	f242 7210 	movw	r2, #10000	; 0x2710
 8000886:	493c      	ldr	r1, [pc, #240]	; (8000978 <main+0x174>)
 8000888:	483c      	ldr	r0, [pc, #240]	; (800097c <main+0x178>)
 800088a:	f7ff feb5 	bl	80005f8 <Fifo_init>

  Fifo_init(&timeDelayFifo, timeDelayBuffer, COMMANDLENGTHX2);
 800088e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000892:	493b      	ldr	r1, [pc, #236]	; (8000980 <main+0x17c>)
 8000894:	483b      	ldr	r0, [pc, #236]	; (8000984 <main+0x180>)
 8000896:	f7ff feaf 	bl	80005f8 <Fifo_init>

  HAL_UART_Receive_IT(&huart3, &byte, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	493a      	ldr	r1, [pc, #232]	; (8000988 <main+0x184>)
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <main+0x188>)
 80008a0:	f002 f944 	bl	8002b2c <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fd49 	bl	800133c <HAL_Delay>
	  command = CommandParser_getCommand(&g_commandParser);
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <main+0x138>)
 80008ac:	f7ff fe58 	bl	8000560 <CommandParser_getCommand>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b36      	ldr	r3, [pc, #216]	; (8000990 <main+0x18c>)
 80008b6:	701a      	strb	r2, [r3, #0]

	  switch(command)
 80008b8:	4b35      	ldr	r3, [pc, #212]	; (8000990 <main+0x18c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3ba1      	subs	r3, #161	; 0xa1
 80008be:	2b13      	cmp	r3, #19
 80008c0:	d836      	bhi.n	8000930 <main+0x12c>
 80008c2:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <main+0xc4>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	08000931 	.word	0x08000931
 80008cc:	08000931 	.word	0x08000931
 80008d0:	08000931 	.word	0x08000931
 80008d4:	08000931 	.word	0x08000931
 80008d8:	08000931 	.word	0x08000931
 80008dc:	08000931 	.word	0x08000931
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000931 	.word	0x08000931
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000931 	.word	0x08000931
 80008f0:	08000931 	.word	0x08000931
 80008f4:	08000931 	.word	0x08000931
 80008f8:	08000931 	.word	0x08000931
 80008fc:	08000931 	.word	0x08000931
 8000900:	08000931 	.word	0x08000931
 8000904:	08000931 	.word	0x08000931
 8000908:	08000919 	.word	0x08000919
 800090c:	0800091f 	.word	0x0800091f
 8000910:	08000925 	.word	0x08000925
 8000914:	0800092b 	.word	0x0800092b
	  {
	  case c_Connect:
		  break;
	  case c_ExecuteTimedSequence:
		  ExecuteTimedSequence();
 8000918:	f000 f8ea 	bl	8000af0 <ExecuteTimedSequence>
		  break;
 800091c:	e009      	b.n	8000932 <main+0x12e>
	  case c_SetPersistentState:
		  SetPersistentState();
 800091e:	f000 f983 	bl	8000c28 <SetPersistentState>
		  break;
 8000922:	e006      	b.n	8000932 <main+0x12e>
	  case c_Release:
		  Release();
 8000924:	f000 f9f4 	bl	8000d10 <Release>
		  break;
 8000928:	e003      	b.n	8000932 <main+0x12e>
	  case c_EndSends:
		  EndSends();
 800092a:	f000 fa27 	bl	8000d7c <EndSends>
		  break;
 800092e:	e000      	b.n	8000932 <main+0x12e>
	  default:
		  break;
 8000930:	bf00      	nop
	  HAL_Delay(10);
 8000932:	e7b7      	b.n	80008a4 <main+0xa0>
 8000934:	2000002c 	.word	0x2000002c
 8000938:	2001d560 	.word	0x2001d560
 800093c:	2001d570 	.word	0x2001d570
 8000940:	20000090 	.word	0x20000090
 8000944:	2001d5d8 	.word	0x2001d5d8
 8000948:	200027a0 	.word	0x200027a0
 800094c:	2001d5b8 	.word	0x2001d5b8
 8000950:	20004eb0 	.word	0x20004eb0
 8000954:	2001d598 	.word	0x2001d598
 8000958:	200075c0 	.word	0x200075c0
 800095c:	2001d550 	.word	0x2001d550
 8000960:	20009cd0 	.word	0x20009cd0
 8000964:	2001d5e8 	.word	0x2001d5e8
 8000968:	2000c3e0 	.word	0x2000c3e0
 800096c:	2001d5a8 	.word	0x2001d5a8
 8000970:	2000eaf0 	.word	0x2000eaf0
 8000974:	2001d5c8 	.word	0x2001d5c8
 8000978:	20011200 	.word	0x20011200
 800097c:	2001d588 	.word	0x2001d588
 8000980:	20013910 	.word	0x20013910
 8000984:	2001d578 	.word	0x2001d578
 8000988:	20000028 	.word	0x20000028
 800098c:	2001d5f8 	.word	0x2001d5f8
 8000990:	20000029 	.word	0x20000029

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b4      	sub	sp, #208	; 0xd0
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800099e:	2230      	movs	r2, #48	; 0x30
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 ffba 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 ffab 	bl	800391c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <SystemClock_Config+0x118>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a38      	ldr	r2, [pc, #224]	; (8000aac <SystemClock_Config+0x118>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <SystemClock_Config+0x118>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <SystemClock_Config+0x11c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <SystemClock_Config+0x11c>)
 80009e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <SystemClock_Config+0x11c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a02:	2310      	movs	r3, #16
 8000a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a1a:	23d8      	movs	r3, #216	; 0xd8
 8000a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ffdd 	bl	80019f0 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a3c:	f000 fb02 	bl	8001044 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a40:	f000 ff86 	bl	8001950 <HAL_PWREx_EnableOverDrive>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a4a:	f000 fafb 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a74:	2107      	movs	r1, #7
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fa5e 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a82:	f000 fadf 	bl	8001044 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fc21 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000aa0:	f000 fad0 	bl	8001044 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	37d0      	adds	r7, #208	; 0xd0
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <HAL_UART_RxCpltCallback+0x30>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d10a      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x26>
	{
		Fifo_push(&g_fifo, byte);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_UART_RxCpltCallback+0x34>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <HAL_UART_RxCpltCallback+0x38>)
 8000acc:	f7ff fdac 	bl	8000628 <Fifo_push>
		HAL_UART_Receive_IT(&huart3, &byte, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4905      	ldr	r1, [pc, #20]	; (8000ae8 <HAL_UART_RxCpltCallback+0x34>)
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <HAL_UART_RxCpltCallback+0x30>)
 8000ad6:	f002 f829 	bl	8002b2c <HAL_UART_Receive_IT>
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2001d5f8 	.word	0x2001d5f8
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	2001d560 	.word	0x2001d560

08000af0 <ExecuteTimedSequence>:

void ExecuteTimedSequence()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71fb      	strb	r3, [r7, #7]

	Fifo_pop(&g_fifo);
 8000afa:	4841      	ldr	r0, [pc, #260]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000afc:	f7ff fdb3 	bl	8000666 <Fifo_pop>

	byte = Fifo_pop(&g_fifo);
 8000b00:	483f      	ldr	r0, [pc, #252]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b02:	f7ff fdb0 	bl	8000666 <Fifo_pop>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483d      	ldr	r0, [pc, #244]	; (8000c04 <ExecuteTimedSequence+0x114>)
 8000b10:	f7ff fd8a 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b14:	483a      	ldr	r0, [pc, #232]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b16:	f7ff fda6 	bl	8000666 <Fifo_pop>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <ExecuteTimedSequence+0x114>)
 8000b24:	f7ff fd80 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b28:	4835      	ldr	r0, [pc, #212]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b2a:	f7ff fd9c 	bl	8000666 <Fifo_pop>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4833      	ldr	r0, [pc, #204]	; (8000c04 <ExecuteTimedSequence+0x114>)
 8000b38:	f7ff fd76 	bl	8000628 <Fifo_push>
	byte = Fifo_pop(&g_fifo);
 8000b3c:	4830      	ldr	r0, [pc, #192]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b3e:	f7ff fd92 	bl	8000666 <Fifo_pop>
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&timeDelayFifo, byte);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <ExecuteTimedSequence+0x114>)
 8000b4c:	f7ff fd6c 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b50:	482b      	ldr	r0, [pc, #172]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b52:	f7ff fd88 	bl	8000666 <Fifo_pop>
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin0Fifo, byte);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	482a      	ldr	r0, [pc, #168]	; (8000c08 <ExecuteTimedSequence+0x118>)
 8000b60:	f7ff fd62 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b64:	4826      	ldr	r0, [pc, #152]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b66:	f7ff fd7e 	bl	8000666 <Fifo_pop>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin1Fifo, byte);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <ExecuteTimedSequence+0x11c>)
 8000b74:	f7ff fd58 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b78:	4821      	ldr	r0, [pc, #132]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b7a:	f7ff fd74 	bl	8000666 <Fifo_pop>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin2Fifo, byte);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4822      	ldr	r0, [pc, #136]	; (8000c10 <ExecuteTimedSequence+0x120>)
 8000b88:	f7ff fd4e 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000b8c:	481c      	ldr	r0, [pc, #112]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000b8e:	f7ff fd6a 	bl	8000666 <Fifo_pop>
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin3Fifo, byte);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481e      	ldr	r0, [pc, #120]	; (8000c14 <ExecuteTimedSequence+0x124>)
 8000b9c:	f7ff fd44 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000ba2:	f7ff fd60 	bl	8000666 <Fifo_pop>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin4Fifo, byte);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4619      	mov	r1, r3
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <ExecuteTimedSequence+0x128>)
 8000bb0:	f7ff fd3a 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000bb6:	f7ff fd56 	bl	8000666 <Fifo_pop>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin5Fifo, byte);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <ExecuteTimedSequence+0x12c>)
 8000bc4:	f7ff fd30 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000bca:	f7ff fd4c 	bl	8000666 <Fifo_pop>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin6Fifo, byte);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4812      	ldr	r0, [pc, #72]	; (8000c20 <ExecuteTimedSequence+0x130>)
 8000bd8:	f7ff fd26 	bl	8000628 <Fifo_push>

	byte = Fifo_pop(&g_fifo);
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <ExecuteTimedSequence+0x110>)
 8000bde:	f7ff fd42 	bl	8000666 <Fifo_pop>
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	Fifo_push(&g_pin7Fifo, byte);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <ExecuteTimedSequence+0x134>)
 8000bec:	f7ff fd1c 	bl	8000628 <Fifo_push>

	SendResponse(c_ExecuteTimedSequence);
 8000bf0:	20b1      	movs	r0, #177	; 0xb1
 8000bf2:	f000 f979 	bl	8000ee8 <SendResponse>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2001d560 	.word	0x2001d560
 8000c04:	2001d578 	.word	0x2001d578
 8000c08:	2001d5d8 	.word	0x2001d5d8
 8000c0c:	2001d5b8 	.word	0x2001d5b8
 8000c10:	2001d598 	.word	0x2001d598
 8000c14:	2001d550 	.word	0x2001d550
 8000c18:	2001d5e8 	.word	0x2001d5e8
 8000c1c:	2001d5a8 	.word	0x2001d5a8
 8000c20:	2001d5c8 	.word	0x2001d5c8
 8000c24:	2001d588 	.word	0x2001d588

08000c28 <SetPersistentState>:

void SetPersistentState()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	uint8_t state = 0x3;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	71fb      	strb	r3, [r7, #7]
	state = Fifo_pop(&g_fifo);
 8000c32:	4833      	ldr	r0, [pc, #204]	; (8000d00 <SetPersistentState+0xd8>)
 8000c34:	f7ff fd17 	bl	8000666 <Fifo_pop>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c42:	4930      	ldr	r1, [pc, #192]	; (8000d04 <SetPersistentState+0xdc>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f9cf 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c4a:	482d      	ldr	r0, [pc, #180]	; (8000d00 <SetPersistentState+0xd8>)
 8000c4c:	f7ff fd0b 	bl	8000666 <Fifo_pop>
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	492b      	ldr	r1, [pc, #172]	; (8000d08 <SetPersistentState+0xe0>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f9c3 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c62:	4827      	ldr	r0, [pc, #156]	; (8000d00 <SetPersistentState+0xd8>)
 8000c64:	f7ff fcff 	bl	8000666 <Fifo_pop>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c72:	4925      	ldr	r1, [pc, #148]	; (8000d08 <SetPersistentState+0xe0>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f9b7 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <SetPersistentState+0xd8>)
 8000c7c:	f7ff fcf3 	bl	8000666 <Fifo_pop>
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	491e      	ldr	r1, [pc, #120]	; (8000d04 <SetPersistentState+0xdc>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f9ab 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <SetPersistentState+0xd8>)
 8000c94:	f7ff fce7 	bl	8000666 <Fifo_pop>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca2:	4919      	ldr	r1, [pc, #100]	; (8000d08 <SetPersistentState+0xe0>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f99f 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <SetPersistentState+0xd8>)
 8000cac:	f7ff fcdb 	bl	8000666 <Fifo_pop>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cba:	4912      	ldr	r1, [pc, #72]	; (8000d04 <SetPersistentState+0xdc>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f993 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <SetPersistentState+0xd8>)
 8000cc4:	f7ff fccf 	bl	8000666 <Fifo_pop>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <SetPersistentState+0xe4>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f987 	bl	8000fe8 <SetPin>
	state = Fifo_pop(&g_fifo);
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <SetPersistentState+0xd8>)
 8000cdc:	f7ff fcc3 	bl	8000666 <Fifo_pop>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
	SetPin(state, TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <SetPersistentState+0xe4>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f97b 	bl	8000fe8 <SetPin>

	SendResponse(c_SetPersistentState);
 8000cf2:	20b2      	movs	r0, #178	; 0xb2
 8000cf4:	f000 f8f8 	bl	8000ee8 <SendResponse>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2001d560 	.word	0x2001d560
 8000d04:	40021400 	.word	0x40021400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40021800 	.word	0x40021800

08000d10 <Release>:

void Release()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	PinReset(TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <Release+0x60>)
 8000d1a:	f000 f947 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <Release+0x64>)
 8000d24:	f000 f942 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <Release+0x64>)
 8000d2e:	f000 f93d 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <Release+0x60>)
 8000d38:	f000 f938 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <Release+0x64>)
 8000d42:	f000 f933 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <Release+0x60>)
 8000d4c:	f000 f92e 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <Release+0x68>)
 8000d56:	f000 f929 	bl	8000fac <PinReset>
	PinReset(TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <Release+0x68>)
 8000d60:	f000 f924 	bl	8000fac <PinReset>

	SendResponse(c_Release);
 8000d64:	20b3      	movs	r0, #179	; 0xb3
 8000d66:	f000 f8bf 	bl	8000ee8 <SendResponse>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021400 	.word	0x40021400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021800 	.word	0x40021800

08000d7c <EndSends>:

void EndSends()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	SendResponse(c_EndSends);
 8000d82:	20b4      	movs	r0, #180	; 0xb4
 8000d84:	f000 f8b0 	bl	8000ee8 <SendResponse>

	uint32_t timeDelay = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
	uint8_t byte1 = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	70fb      	strb	r3, [r7, #3]
	uint8_t byte2 = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	70bb      	strb	r3, [r7, #2]
	uint8_t byte3 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	707b      	strb	r3, [r7, #1]
	uint8_t byte4 = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	703b      	strb	r3, [r7, #0]

	while(!Fifo_isEmpty(&timeDelayFifo))
 8000d9c:	e081      	b.n	8000ea2 <EndSends+0x126>
	{
		byte1 = Fifo_pop(&timeDelayFifo);
 8000d9e:	4846      	ldr	r0, [pc, #280]	; (8000eb8 <EndSends+0x13c>)
 8000da0:	f7ff fc61 	bl	8000666 <Fifo_pop>
 8000da4:	4603      	mov	r3, r0
 8000da6:	70fb      	strb	r3, [r7, #3]
		byte2 = Fifo_pop(&timeDelayFifo);
 8000da8:	4843      	ldr	r0, [pc, #268]	; (8000eb8 <EndSends+0x13c>)
 8000daa:	f7ff fc5c 	bl	8000666 <Fifo_pop>
 8000dae:	4603      	mov	r3, r0
 8000db0:	70bb      	strb	r3, [r7, #2]
		byte3 = Fifo_pop(&timeDelayFifo);
 8000db2:	4841      	ldr	r0, [pc, #260]	; (8000eb8 <EndSends+0x13c>)
 8000db4:	f7ff fc57 	bl	8000666 <Fifo_pop>
 8000db8:	4603      	mov	r3, r0
 8000dba:	707b      	strb	r3, [r7, #1]
		byte4 = Fifo_pop(&timeDelayFifo);
 8000dbc:	483e      	ldr	r0, [pc, #248]	; (8000eb8 <EndSends+0x13c>)
 8000dbe:	f7ff fc52 	bl	8000666 <Fifo_pop>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	703b      	strb	r3, [r7, #0]
		timeDelay = (byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1;
 8000dc6:	783b      	ldrb	r3, [r7, #0]
 8000dc8:	061a      	lsls	r2, r3, #24
 8000dca:	787b      	ldrb	r3, [r7, #1]
 8000dcc:	041b      	lsls	r3, r3, #16
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	607b      	str	r3, [r7, #4]

		byte1 = Fifo_pop(&g_pin0Fifo);
 8000ddc:	4837      	ldr	r0, [pc, #220]	; (8000ebc <EndSends+0x140>)
 8000dde:	f7ff fc42 	bl	8000666 <Fifo_pop>
 8000de2:	4603      	mov	r3, r0
 8000de4:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_0_GPIO_Port, TOGGLE_PIN_0_Pin);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dec:	4934      	ldr	r1, [pc, #208]	; (8000ec0 <EndSends+0x144>)
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f8fa 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin1Fifo);
 8000df4:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <EndSends+0x148>)
 8000df6:	f7ff fc36 	bl	8000666 <Fifo_pop>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_1_GPIO_Port, TOGGLE_PIN_1_Pin);
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	4930      	ldr	r1, [pc, #192]	; (8000ec8 <EndSends+0x14c>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8ee 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin2Fifo);
 8000e0c:	482f      	ldr	r0, [pc, #188]	; (8000ecc <EndSends+0x150>)
 8000e0e:	f7ff fc2a 	bl	8000666 <Fifo_pop>
 8000e12:	4603      	mov	r3, r0
 8000e14:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_2_GPIO_Port, TOGGLE_PIN_2_Pin);
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1c:	492a      	ldr	r1, [pc, #168]	; (8000ec8 <EndSends+0x14c>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f8e2 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin3Fifo);
 8000e24:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <EndSends+0x154>)
 8000e26:	f7ff fc1e 	bl	8000666 <Fifo_pop>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_3_GPIO_Port, TOGGLE_PIN_3_Pin);
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e34:	4922      	ldr	r1, [pc, #136]	; (8000ec0 <EndSends+0x144>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f8d6 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin4Fifo);
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <EndSends+0x158>)
 8000e3e:	f7ff fc12 	bl	8000666 <Fifo_pop>
 8000e42:	4603      	mov	r3, r0
 8000e44:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_4_GPIO_Port, TOGGLE_PIN_4_Pin);
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4c:	491e      	ldr	r1, [pc, #120]	; (8000ec8 <EndSends+0x14c>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f8ca 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin5Fifo);
 8000e54:	4820      	ldr	r0, [pc, #128]	; (8000ed8 <EndSends+0x15c>)
 8000e56:	f7ff fc06 	bl	8000666 <Fifo_pop>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_5_GPIO_Port, TOGGLE_PIN_5_Pin);
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e64:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <EndSends+0x144>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f8be 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin6Fifo);
 8000e6c:	481b      	ldr	r0, [pc, #108]	; (8000edc <EndSends+0x160>)
 8000e6e:	f7ff fbfa 	bl	8000666 <Fifo_pop>
 8000e72:	4603      	mov	r3, r0
 8000e74:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_6_GPIO_Port, TOGGLE_PIN_6_Pin);
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7c:	4918      	ldr	r1, [pc, #96]	; (8000ee0 <EndSends+0x164>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f8b2 	bl	8000fe8 <SetPin>

		byte1 = Fifo_pop(&g_pin7Fifo);
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <EndSends+0x168>)
 8000e86:	f7ff fbee 	bl	8000666 <Fifo_pop>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	70fb      	strb	r3, [r7, #3]
		SetPin(byte1, TOGGLE_PIN_7_GPIO_Port, TOGGLE_PIN_7_Pin);
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	4912      	ldr	r1, [pc, #72]	; (8000ee0 <EndSends+0x164>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f8a6 	bl	8000fe8 <SetPin>

		HAL_Delay(timeDelay);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fa4d 	bl	800133c <HAL_Delay>
	while(!Fifo_isEmpty(&timeDelayFifo))
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <EndSends+0x13c>)
 8000ea4:	f7ff fbff 	bl	80006a6 <Fifo_isEmpty>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f43f af77 	beq.w	8000d9e <EndSends+0x22>
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2001d578 	.word	0x2001d578
 8000ebc:	2001d5d8 	.word	0x2001d5d8
 8000ec0:	40021400 	.word	0x40021400
 8000ec4:	2001d5b8 	.word	0x2001d5b8
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	2001d598 	.word	0x2001d598
 8000ed0:	2001d550 	.word	0x2001d550
 8000ed4:	2001d5e8 	.word	0x2001d5e8
 8000ed8:	2001d5a8 	.word	0x2001d5a8
 8000edc:	2001d5c8 	.word	0x2001d5c8
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	2001d588 	.word	0x2001d588

08000ee8 <SendResponse>:

void SendResponse(uint8_t _command)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t response[3];
	response[0] = SyncByte1;
 8000ef2:	23a5      	movs	r3, #165	; 0xa5
 8000ef4:	733b      	strb	r3, [r7, #12]
	response[1] = SyncByte2;
 8000ef6:	23c3      	movs	r3, #195	; 0xc3
 8000ef8:	737b      	strb	r3, [r7, #13]
	response[2] = _command;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	73bb      	strb	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, 3, HAL_MAX_DELAY);
 8000efe:	f107 010c 	add.w	r1, r7, #12
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f06:	2203      	movs	r2, #3
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <SendResponse+0x30>)
 8000f0a:	f001 fd7d 	bl	8002a08 <HAL_UART_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2001d5f8 	.word	0x2001d5f8

08000f1c <PinHigh>:

void PinHigh(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fb4c 	bl	80015e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(_gpioPort, _gpioPin, GPIO_PIN_SET);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fce0 	bl	800191c <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <PinLow>:

void PinLow(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fb28 	bl	80015e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(_gpioPort, _gpioPin, GPIO_PIN_RESET);
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fcbc 	bl	800191c <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <PinReset>:

void PinReset(GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _gpioPin;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(_gpioPort, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fb04 	bl	80015e8 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SetPin>:

void SetPin(uint8_t state, GPIO_TypeDef* _gpioPort, uint16_t _gpioPin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
	switch(state)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d81d      	bhi.n	800103a <SetPin+0x52>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <SetPin+0x1c>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001015 	.word	0x08001015
 8001008:	08001021 	.word	0x08001021
 800100c:	0800102d 	.word	0x0800102d
 8001010:	08001039 	.word	0x08001039
	{
	case FLOAT:
		PinReset(_gpioPort, _gpioPin);
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	4619      	mov	r1, r3
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f7ff ffc7 	bl	8000fac <PinReset>
		break;
 800101e:	e00c      	b.n	800103a <SetPin+0x52>
	case LOW:
		PinLow(_gpioPort, _gpioPin);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	4619      	mov	r1, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f7ff ff9d 	bl	8000f64 <PinLow>
		break;
 800102a:	e006      	b.n	800103a <SetPin+0x52>
	case HIGH:
		PinHigh(_gpioPort, _gpioPin);
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	4619      	mov	r1, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff ff73 	bl	8000f1c <PinHigh>
		break;
 8001036:	e000      	b.n	800103a <SetPin+0x52>
	case NO_CHANGE:
		break;
 8001038:	bf00      	nop
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f904 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <USART3_IRQHandler+0x10>)
 80010fe:	f001 fdb7 	bl	8002c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2001d5f8 	.word	0x2001d5f8

0800110c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <SystemInit+0x28>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <SystemInit+0x28>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SystemInit+0x28>)
 8001122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001126:	609a      	str	r2, [r3, #8]
#endif
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <MX_USART3_UART_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800117c:	f001 fbf6 	bl	800296c <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f7ff ff5d 	bl	8001044 <Error_Handler>
  }

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2001d5f8 	.word	0x2001d5f8
 8001194:	40004800 	.word	0x40004800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d130      	bne.n	800121c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fc:	2307      	movs	r3, #7
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <HAL_UART_MspInit+0x94>)
 8001208:	f000 f9ee 	bl	80015e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2027      	movs	r0, #39	; 0x27
 8001212:	f000 f990 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001216:	2027      	movs	r0, #39	; 0x27
 8001218:	f000 f9a9 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004800 	.word	0x40004800
 8001228:	40023800 	.word	0x40023800
 800122c:	40020c00 	.word	0x40020c00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001234:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001236:	e003      	b.n	8001240 <LoopCopyDataInit>

08001238 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800123a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800123c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123e:	3104      	adds	r1, #4

08001240 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001244:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001246:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001248:	d3f6      	bcc.n	8001238 <CopyDataInit>
  ldr  r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800124c:	e002      	b.n	8001254 <LoopFillZerobss>

0800124e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001250:	f842 3b04 	str.w	r3, [r2], #4

08001254 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001256:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001258:	d3f9      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125a:	f7ff ff57 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f002 fb39 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff facf 	bl	8000804 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800126c:	0800396c 	.word	0x0800396c
  ldr  r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001274:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001278:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800127c:	2001d67c 	.word	0x2001d67c

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>

08001282 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f94a 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f805 	bl	800129c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fedf 	bl	8001054 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f965 	bl	800158a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f000 f92d 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	2001d678 	.word	0x2001d678

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2001d678 	.word	0x2001d678

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_Delay+0x40>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000008 	.word	0x20000008

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x40>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	05fa0000 	.word	0x05fa0000

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d004      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00c      	b.n	80015da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2205      	movs	r2, #5
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e169      	b.n	80018dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8158 	bne.w	80018d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d00b      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163a:	2b11      	cmp	r3, #17
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b12      	cmp	r3, #18
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x100>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80b2 	beq.w	80018d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_GPIO_Init+0x308>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x310>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x314>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x318>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x31c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <HAL_GPIO_Init+0x320>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x324>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_GPIO_Init+0x328>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4a      	ldr	r2, [pc, #296]	; (8001914 <HAL_GPIO_Init+0x32c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x20a>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00e      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f2:	2308      	movs	r3, #8
 80017f4:	e00c      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00a      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fa:	2305      	movs	r3, #5
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fe:	2304      	movs	r3, #4
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001820:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001852:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_GPIO_Init+0x330>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_GPIO_Init+0x330>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_GPIO_Init+0x330>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_GPIO_Init+0x330>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f ae92 	bls.w	8001608 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3724      	adds	r7, #36	; 0x24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197e:	f7ff fcd1 	bl	8001324 <HAL_GetTick>
 8001982:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001984:	e009      	b.n	800199a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001986:	f7ff fccd 	bl	8001324 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001994:	d901      	bls.n	800199a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e022      	b.n	80019e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d1ee      	bne.n	8001986 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b4:	f7ff fcb6 	bl	8001324 <HAL_GetTick>
 80019b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019ba:	e009      	b.n	80019d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019bc:	f7ff fcb2 	bl	8001324 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ca:	d901      	bls.n	80019d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e007      	b.n	80019e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019dc:	d1ee      	bne.n	80019bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e291      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a20:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62>
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x130>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d168      	bne.n	8001b20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e26b      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x7a>
 8001a5c:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a83      	ldr	r2, [pc, #524]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x9c>
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7b      	ldr	r2, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xc0>
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a75      	ldr	r2, [pc, #468]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a72      	ldr	r2, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd8>
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6b      	ldr	r2, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc28 	bl	8001324 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fc24 	bl	8001324 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e21f      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe8>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fc14 	bl	8001324 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fc10 	bl	8001324 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e20b      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x110>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d069      	beq.n	8001c02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d11c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x190>
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x17a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e1df      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	493d      	ldr	r1, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e040      	b.n	8001c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fbc6 	bl	8001324 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fbc2 	bl	8001324 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1bd      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4929      	ldr	r1, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fba2 	bl	8001324 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fb9e 	bl	8001324 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e199      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d038      	beq.n	8001c80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff fb7f 	bl	8001324 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fb7b 	bl	8001324 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e176      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x23a>
 8001c48:	e01a      	b.n	8001c80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb65 	bl	8001324 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fb61 	bl	8001324 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d903      	bls.n	8001c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e15c      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
 8001c70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a4 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a87      	ldr	r2, [pc, #540]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb6:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cc2:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <HAL_RCC_OscConfig+0x4d0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7e      	ldr	r2, [pc, #504]	; (8001ec0 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb29 	bl	8001324 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff fb25 	bl	8001324 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e120      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce8:	4b75      	ldr	r3, [pc, #468]	; (8001ec0 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x31a>
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	e02d      	b.n	8001d66 <HAL_RCC_OscConfig+0x376>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x33c>
 8001d12:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a66      	ldr	r2, [pc, #408]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	e01c      	b.n	8001d66 <HAL_RCC_OscConfig+0x376>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x35e>
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a60      	ldr	r2, [pc, #384]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x376>
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d015      	beq.n	8001d9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fad9 	bl	8001324 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fad5 	bl	8001324 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0ce      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ee      	beq.n	8001d76 <HAL_RCC_OscConfig+0x386>
 8001d98:	e014      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fac3 	bl	8001324 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fabf 	bl	8001324 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a3b      	ldr	r2, [pc, #236]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a4 	beq.w	8001f28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d06b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d149      	bne.n	8001e88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a30      	ldr	r2, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa90 	bl	8001324 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fa8c 	bl	8001324 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e087      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff fa60 	bl	8001324 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fa5c 	bl	8001324 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e057      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x478>
 8001e86:	e04f      	b.n	8001f28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa46 	bl	8001324 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fa42 	bl	8001324 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e03d      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eae:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4ac>
 8001eba:	e035      	b.n	8001f28 <HAL_RCC_OscConfig+0x538>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x544>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d028      	beq.n	8001f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d121      	bne.n	8001f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11a      	bne.n	8001f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001efa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0d0      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	4965      	ldr	r1, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e073      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7ff f97a 	bl	8001324 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff f976 	bl	8001324 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1cc>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	fa21 f303 	lsr.w	r3, r1, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1d0>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1d4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f8d6 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	40023800 	.word	0x40023800
 8002104:	08003944 	.word	0x08003944
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002126:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d007      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x32>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d008      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x38>
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 808d 	bne.w	8002256 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_RCC_GetSysClockFreq+0x15c>)
 800213e:	60bb      	str	r3, [r7, #8]
      break;
 8002140:	e08c      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002142:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 8002144:	60bb      	str	r3, [r7, #8]
      break;
 8002146:	e089      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002148:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002150:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215e:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	f04f 0400 	mov.w	r4, #0
 8002168:	f240 11ff 	movw	r1, #511	; 0x1ff
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	ea03 0501 	and.w	r5, r3, r1
 8002174:	ea04 0602 	and.w	r6, r4, r2
 8002178:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 800217a:	fb02 f106 	mul.w	r1, r2, r6
 800217e:	2200      	movs	r2, #0
 8002180:	fb02 f205 	mul.w	r2, r2, r5
 8002184:	440a      	add	r2, r1
 8002186:	493a      	ldr	r1, [pc, #232]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 8002188:	fba5 0101 	umull	r0, r1, r5, r1
 800218c:	1853      	adds	r3, r2, r1
 800218e:	4619      	mov	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	461a      	mov	r2, r3
 8002198:	4623      	mov	r3, r4
 800219a:	f7fe f841 	bl	8000220 <__aeabi_uldivmod>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e049      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a6:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	f04f 0400 	mov.w	r4, #0
 80021b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	ea03 0501 	and.w	r5, r3, r1
 80021bc:	ea04 0602 	and.w	r6, r4, r2
 80021c0:	4629      	mov	r1, r5
 80021c2:	4632      	mov	r2, r6
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	0154      	lsls	r4, r2, #5
 80021ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021d2:	014b      	lsls	r3, r1, #5
 80021d4:	4619      	mov	r1, r3
 80021d6:	4622      	mov	r2, r4
 80021d8:	1b49      	subs	r1, r1, r5
 80021da:	eb62 0206 	sbc.w	r2, r2, r6
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	f04f 0400 	mov.w	r4, #0
 80021e6:	0194      	lsls	r4, r2, #6
 80021e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021ec:	018b      	lsls	r3, r1, #6
 80021ee:	1a5b      	subs	r3, r3, r1
 80021f0:	eb64 0402 	sbc.w	r4, r4, r2
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	00e2      	lsls	r2, r4, #3
 80021fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002202:	00d9      	lsls	r1, r3, #3
 8002204:	460b      	mov	r3, r1
 8002206:	4614      	mov	r4, r2
 8002208:	195b      	adds	r3, r3, r5
 800220a:	eb44 0406 	adc.w	r4, r4, r6
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	02a2      	lsls	r2, r4, #10
 8002218:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800221c:	0299      	lsls	r1, r3, #10
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	4618      	mov	r0, r3
 8002224:	4621      	mov	r1, r4
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	461a      	mov	r2, r3
 800222e:	4623      	mov	r3, r4
 8002230:	f7fd fff6 	bl	8000220 <__aeabi_uldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetSysClockFreq+0x158>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	3301      	adds	r3, #1
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	60bb      	str	r3, [r7, #8]
      break;
 8002254:	e002      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002258:	60bb      	str	r3, [r7, #8]
      break;
 800225a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225c:	68bb      	ldr	r3, [r7, #8]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	017d7840 	.word	0x017d7840

08002274 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4601      	mov	r1, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08003954 	.word	0x08003954

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b8:	f7ff ffdc 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0b5b      	lsrs	r3, r3, #13
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08003954 	.word	0x08003954

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a64      	ldr	r2, [pc, #400]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002306:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	4960      	ldr	r1, [pc, #384]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d017      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	4955      	ldr	r1, [pc, #340]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002350:	d101      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d017      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002374:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	4946      	ldr	r1, [pc, #280]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d101      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 808b 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6413      	str	r3, [r2, #64]	; 0x40
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe ffa8 	bl	8001324 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe ffa4 	bl	8001324 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2ba      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d035      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d02e      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d114      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe ff6c 	bl	8001324 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe ff68 	bl	8001324 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e27c      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ee      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800247e:	d111      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800248e:	400b      	ands	r3, r1
 8002490:	4901      	ldr	r1, [pc, #4]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
 8002496:	e00b      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	0ffffcff 	.word	0x0ffffcff
 80024a4:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4aa2      	ldr	r2, [pc, #648]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	4ba0      	ldr	r3, [pc, #640]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	499d      	ldr	r1, [pc, #628]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ce:	4b99      	ldr	r3, [pc, #612]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d4:	4a97      	ldr	r2, [pc, #604]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024de:	4b95      	ldr	r3, [pc, #596]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4992      	ldr	r1, [pc, #584]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	498a      	ldr	r1, [pc, #552]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252c:	4981      	ldr	r1, [pc, #516]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002540:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254e:	4979      	ldr	r1, [pc, #484]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f023 0203 	bic.w	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	4970      	ldr	r1, [pc, #448]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 020c 	bic.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4968      	ldr	r1, [pc, #416]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	495f      	ldr	r1, [pc, #380]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c8:	4b5a      	ldr	r3, [pc, #360]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	4957      	ldr	r1, [pc, #348]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	494e      	ldr	r1, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261a:	4946      	ldr	r1, [pc, #280]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	493d      	ldr	r1, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d011      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	492c      	ldr	r1, [pc, #176]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002690:	d101      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b0:	4920      	ldr	r1, [pc, #128]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d2:	4918      	ldr	r1, [pc, #96]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f4:	490f      	ldr	r1, [pc, #60]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d005      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800270a:	f040 809c 	bne.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002714:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271a:	f7fe fe03 	bl	8001324 <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002722:	f7fe fdff 	bl	8001324 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	; 0x64
 800272e:	d903      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e115      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002734:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002738:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ee      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d113      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002758:	4b83      	ldr	r3, [pc, #524]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800275a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275e:	0e1b      	lsrs	r3, r3, #24
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	019a      	lsls	r2, r3, #6
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	061b      	lsls	r3, r3, #24
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	071b      	lsls	r3, r3, #28
 8002778:	497b      	ldr	r1, [pc, #492]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d024      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027aa:	d11f      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ac:	4b6e      	ldr	r3, [pc, #440]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b2:	0f1b      	lsrs	r3, r3, #28
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	019a      	lsls	r2, r3, #6
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	071b      	lsls	r3, r3, #28
 80027cc:	4966      	ldr	r1, [pc, #408]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027da:	f023 021f 	bic.w	r2, r3, #31
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	4960      	ldr	r1, [pc, #384]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	019a      	lsls	r2, r3, #6
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	071b      	lsls	r3, r3, #28
 800280c:	4956      	ldr	r1, [pc, #344]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a53      	ldr	r2, [pc, #332]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800281a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fd80 	bl	8001324 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002828:	f7fe fd7c 	bl	8001324 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e092      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800283a:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 8088 	bne.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a45      	ldr	r2, [pc, #276]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285a:	f7fe fd63 	bl	8001324 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002862:	f7fe fd5f 	bl	8001324 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	; 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e075      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002874:	4b3c      	ldr	r3, [pc, #240]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d0ef      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d120      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	019a      	lsls	r2, r3, #6
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	4920      	ldr	r1, [pc, #128]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d018      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002900:	d113      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	019a      	lsls	r2, r3, #6
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	431a      	orrs	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4911      	ldr	r1, [pc, #68]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7fe fcf5 	bl	8001324 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800293e:	f7fe fcf1 	bl	8001324 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e007      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295c:	d1ef      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800

0800296c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e040      	b.n	8002a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fc02 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 faa6 	bl	8002efc <UART_SetConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fd44 	bl	8003450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fdcb 	bl	8003594 <UART_CheckIdleState>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d17f      	bne.n	8002b20 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit+0x24>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e078      	b.n	8002b22 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Transmit+0x36>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e071      	b.n	8002b22 <HAL_UART_Transmit+0x11a>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a52:	f7fe fc67 	bl	8001324 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d108      	bne.n	8002a84 <HAL_UART_Transmit+0x7c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e003      	b.n	8002a8c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002a94:	e02c      	b.n	8002af0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fda6 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e038      	b.n	8002b22 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e007      	b.n	8002ade <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	3301      	adds	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1cc      	bne.n	8002a96 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fd73 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e005      	b.n	8002b22 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 808a 	bne.w	8002c58 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Receive_IT+0x24>
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e082      	b.n	8002c5a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Receive_IT+0x36>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e07b      	b.n	8002c5a <HAL_UART_Receive_IT+0x12e>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8e:	d10e      	bne.n	8002bae <HAL_UART_Receive_IT+0x82>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_UART_Receive_IT+0x78>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ba2:	e02d      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bac:	e028      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_UART_Receive_IT+0xa6>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d104      	bne.n	8002bc8 <HAL_UART_Receive_IT+0x9c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bc6:	e01b      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	227f      	movs	r2, #127	; 0x7f
 8002bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bd0:	e016      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bda:	d10d      	bne.n	8002bf8 <HAL_UART_Receive_IT+0xcc>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_UART_Receive_IT+0xc2>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	227f      	movs	r2, #127	; 0x7f
 8002be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bec:	e008      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	223f      	movs	r2, #63	; 0x3f
 8002bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bf6:	e003      	b.n	8002c00 <HAL_UART_Receive_IT+0xd4>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2222      	movs	r2, #34	; 0x22
 8002c0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d107      	bne.n	8002c36 <HAL_UART_Receive_IT+0x10a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_UART_Receive_IT+0x13c>)
 8002c32:	661a      	str	r2, [r3, #96]	; 0x60
 8002c34:	e002      	b.n	8002c3c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_UART_Receive_IT+0x140>)
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002c52:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	0800382d 	.word	0x0800382d
 8002c6c:	08003787 	.word	0x08003787

08002c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8100 	beq.w	8002ebe <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
      }
      return;
 8002cc6:	e0fa      	b.n	8002ebe <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80d5 	beq.w	8002e7a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80ca 	beq.w	8002e7a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <HAL_UART_IRQHandler+0x9e>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_UART_IRQHandler+0xc6>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2202      	movs	r2, #2
 8002d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <HAL_UART_IRQHandler+0xee>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2208      	movs	r2, #8
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00f      	beq.n	8002dba <HAL_UART_IRQHandler+0x14a>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07f      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00c      	beq.n	8002de6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d004      	beq.n	8002e04 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d031      	beq.n	8002e68 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fc6f 	bl	80036e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d123      	bne.n	8002e60 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e26:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_UART_IRQHandler+0x260>)
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fbb0 	bl	80015a2 <HAL_DMA_Abort_IT>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d016      	beq.n	8002e76 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e52:	4610      	mov	r0, r2
 8002e54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e56:	e00e      	b.n	8002e76 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f845 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5e:	e00a      	b.n	8002e76 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f841 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e66:	e006      	b.n	8002e76 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f83d 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002e74:	e025      	b.n	8002ec2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e76:	bf00      	nop
    return;
 8002e78:	e023      	b.n	8002ec2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
    }
    return;
 8002e9e:	e012      	b.n	8002ec6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x258>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fc4d 	bl	8003754 <UART_EndTransmit_IT>
    return;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <HAL_UART_IRQHandler+0x258>
      return;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <HAL_UART_IRQHandler+0x258>
    return;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_UART_IRQHandler+0x258>
    return;
 8002ec6:	bf00      	nop
  }

}
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	08003729 	.word	0x08003729

08002ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4bb1      	ldr	r3, [pc, #708]	; (80031f0 <UART_SetConfig+0x2f4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6939      	ldr	r1, [r7, #16]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a9f      	ldr	r2, [pc, #636]	; (80031f4 <UART_SetConfig+0x2f8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d121      	bne.n	8002fc0 <UART_SetConfig+0xc4>
 8002f7c:	4b9e      	ldr	r3, [pc, #632]	; (80031f8 <UART_SetConfig+0x2fc>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d816      	bhi.n	8002fb8 <UART_SetConfig+0xbc>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <UART_SetConfig+0x94>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08002fad 	.word	0x08002fad
 8002f98:	08002fa7 	.word	0x08002fa7
 8002f9c:	08002fb3 	.word	0x08002fb3
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e151      	b.n	800324a <UART_SetConfig+0x34e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e14e      	b.n	800324a <UART_SetConfig+0x34e>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e14b      	b.n	800324a <UART_SetConfig+0x34e>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e148      	b.n	800324a <UART_SetConfig+0x34e>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	bf00      	nop
 8002fbe:	e144      	b.n	800324a <UART_SetConfig+0x34e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a8d      	ldr	r2, [pc, #564]	; (80031fc <UART_SetConfig+0x300>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d134      	bne.n	8003034 <UART_SetConfig+0x138>
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <UART_SetConfig+0x2fc>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d829      	bhi.n	800302c <UART_SetConfig+0x130>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <UART_SetConfig+0xe4>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	0800302d 	.word	0x0800302d
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	08003021 	.word	0x08003021
 8002ff4:	0800302d 	.word	0x0800302d
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	0800302d 	.word	0x0800302d
 8003000:	0800301b 	.word	0x0800301b
 8003004:	0800302d 	.word	0x0800302d
 8003008:	0800302d 	.word	0x0800302d
 800300c:	0800302d 	.word	0x0800302d
 8003010:	08003027 	.word	0x08003027
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e117      	b.n	800324a <UART_SetConfig+0x34e>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e114      	b.n	800324a <UART_SetConfig+0x34e>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e111      	b.n	800324a <UART_SetConfig+0x34e>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e10e      	b.n	800324a <UART_SetConfig+0x34e>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	bf00      	nop
 8003032:	e10a      	b.n	800324a <UART_SetConfig+0x34e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a71      	ldr	r2, [pc, #452]	; (8003200 <UART_SetConfig+0x304>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d120      	bne.n	8003080 <UART_SetConfig+0x184>
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <UART_SetConfig+0x2fc>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003048:	2b10      	cmp	r3, #16
 800304a:	d00f      	beq.n	800306c <UART_SetConfig+0x170>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d802      	bhi.n	8003056 <UART_SetConfig+0x15a>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <UART_SetConfig+0x164>
 8003054:	e010      	b.n	8003078 <UART_SetConfig+0x17c>
 8003056:	2b20      	cmp	r3, #32
 8003058:	d005      	beq.n	8003066 <UART_SetConfig+0x16a>
 800305a:	2b30      	cmp	r3, #48	; 0x30
 800305c:	d009      	beq.n	8003072 <UART_SetConfig+0x176>
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x17c>
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0f1      	b.n	800324a <UART_SetConfig+0x34e>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e0ee      	b.n	800324a <UART_SetConfig+0x34e>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e0eb      	b.n	800324a <UART_SetConfig+0x34e>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e0e8      	b.n	800324a <UART_SetConfig+0x34e>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	bf00      	nop
 800307e:	e0e4      	b.n	800324a <UART_SetConfig+0x34e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5f      	ldr	r2, [pc, #380]	; (8003204 <UART_SetConfig+0x308>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d120      	bne.n	80030cc <UART_SetConfig+0x1d0>
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <UART_SetConfig+0x2fc>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d00f      	beq.n	80030b8 <UART_SetConfig+0x1bc>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d802      	bhi.n	80030a2 <UART_SetConfig+0x1a6>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <UART_SetConfig+0x1b0>
 80030a0:	e010      	b.n	80030c4 <UART_SetConfig+0x1c8>
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d005      	beq.n	80030b2 <UART_SetConfig+0x1b6>
 80030a6:	2bc0      	cmp	r3, #192	; 0xc0
 80030a8:	d009      	beq.n	80030be <UART_SetConfig+0x1c2>
 80030aa:	e00b      	b.n	80030c4 <UART_SetConfig+0x1c8>
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e0cb      	b.n	800324a <UART_SetConfig+0x34e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e0c8      	b.n	800324a <UART_SetConfig+0x34e>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e0c5      	b.n	800324a <UART_SetConfig+0x34e>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e0c2      	b.n	800324a <UART_SetConfig+0x34e>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	bf00      	nop
 80030ca:	e0be      	b.n	800324a <UART_SetConfig+0x34e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4d      	ldr	r2, [pc, #308]	; (8003208 <UART_SetConfig+0x30c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d124      	bne.n	8003120 <UART_SetConfig+0x224>
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <UART_SetConfig+0x2fc>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d012      	beq.n	800310c <UART_SetConfig+0x210>
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	d802      	bhi.n	80030f2 <UART_SetConfig+0x1f6>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <UART_SetConfig+0x204>
 80030f0:	e012      	b.n	8003118 <UART_SetConfig+0x21c>
 80030f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f6:	d006      	beq.n	8003106 <UART_SetConfig+0x20a>
 80030f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fc:	d009      	beq.n	8003112 <UART_SetConfig+0x216>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x21c>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0a1      	b.n	800324a <UART_SetConfig+0x34e>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e09e      	b.n	800324a <UART_SetConfig+0x34e>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e09b      	b.n	800324a <UART_SetConfig+0x34e>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e098      	b.n	800324a <UART_SetConfig+0x34e>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	bf00      	nop
 800311e:	e094      	b.n	800324a <UART_SetConfig+0x34e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a39      	ldr	r2, [pc, #228]	; (800320c <UART_SetConfig+0x310>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d124      	bne.n	8003174 <UART_SetConfig+0x278>
 800312a:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <UART_SetConfig+0x2fc>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003138:	d012      	beq.n	8003160 <UART_SetConfig+0x264>
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d802      	bhi.n	8003146 <UART_SetConfig+0x24a>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <UART_SetConfig+0x258>
 8003144:	e012      	b.n	800316c <UART_SetConfig+0x270>
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314a:	d006      	beq.n	800315a <UART_SetConfig+0x25e>
 800314c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003150:	d009      	beq.n	8003166 <UART_SetConfig+0x26a>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x270>
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e077      	b.n	800324a <UART_SetConfig+0x34e>
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e074      	b.n	800324a <UART_SetConfig+0x34e>
 8003160:	2304      	movs	r3, #4
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e071      	b.n	800324a <UART_SetConfig+0x34e>
 8003166:	2308      	movs	r3, #8
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e06e      	b.n	800324a <UART_SetConfig+0x34e>
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	bf00      	nop
 8003172:	e06a      	b.n	800324a <UART_SetConfig+0x34e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a25      	ldr	r2, [pc, #148]	; (8003210 <UART_SetConfig+0x314>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d124      	bne.n	80031c8 <UART_SetConfig+0x2cc>
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <UART_SetConfig+0x2fc>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d012      	beq.n	80031b4 <UART_SetConfig+0x2b8>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d802      	bhi.n	800319a <UART_SetConfig+0x29e>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <UART_SetConfig+0x2ac>
 8003198:	e012      	b.n	80031c0 <UART_SetConfig+0x2c4>
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319e:	d006      	beq.n	80031ae <UART_SetConfig+0x2b2>
 80031a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031a4:	d009      	beq.n	80031ba <UART_SetConfig+0x2be>
 80031a6:	e00b      	b.n	80031c0 <UART_SetConfig+0x2c4>
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e04d      	b.n	800324a <UART_SetConfig+0x34e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e04a      	b.n	800324a <UART_SetConfig+0x34e>
 80031b4:	2304      	movs	r3, #4
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e047      	b.n	800324a <UART_SetConfig+0x34e>
 80031ba:	2308      	movs	r3, #8
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e044      	b.n	800324a <UART_SetConfig+0x34e>
 80031c0:	2310      	movs	r3, #16
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	bf00      	nop
 80031c6:	e040      	b.n	800324a <UART_SetConfig+0x34e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a11      	ldr	r2, [pc, #68]	; (8003214 <UART_SetConfig+0x318>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d139      	bne.n	8003246 <UART_SetConfig+0x34a>
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <UART_SetConfig+0x2fc>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e0:	d027      	beq.n	8003232 <UART_SetConfig+0x336>
 80031e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e6:	d817      	bhi.n	8003218 <UART_SetConfig+0x31c>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01c      	beq.n	8003226 <UART_SetConfig+0x32a>
 80031ec:	e027      	b.n	800323e <UART_SetConfig+0x342>
 80031ee:	bf00      	nop
 80031f0:	efff69f3 	.word	0xefff69f3
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40004400 	.word	0x40004400
 8003200:	40004800 	.word	0x40004800
 8003204:	40004c00 	.word	0x40004c00
 8003208:	40005000 	.word	0x40005000
 800320c:	40011400 	.word	0x40011400
 8003210:	40007800 	.word	0x40007800
 8003214:	40007c00 	.word	0x40007c00
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321c:	d006      	beq.n	800322c <UART_SetConfig+0x330>
 800321e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003222:	d009      	beq.n	8003238 <UART_SetConfig+0x33c>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x342>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e00e      	b.n	800324a <UART_SetConfig+0x34e>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e00b      	b.n	800324a <UART_SetConfig+0x34e>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e008      	b.n	800324a <UART_SetConfig+0x34e>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x34e>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	bf00      	nop
 8003244:	e001      	b.n	800324a <UART_SetConfig+0x34e>
 8003246:	2310      	movs	r3, #16
 8003248:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003252:	d17f      	bne.n	8003354 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d85c      	bhi.n	8003314 <UART_SetConfig+0x418>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0x364>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003285 	.word	0x08003285
 8003264:	080032a5 	.word	0x080032a5
 8003268:	080032c5 	.word	0x080032c5
 800326c:	08003315 	.word	0x08003315
 8003270:	080032dd 	.word	0x080032dd
 8003274:	08003315 	.word	0x08003315
 8003278:	08003315 	.word	0x08003315
 800327c:	08003315 	.word	0x08003315
 8003280:	080032fd 	.word	0x080032fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7ff f802 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003288:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	005a      	lsls	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	61bb      	str	r3, [r7, #24]
        break;
 80032a2:	e03a      	b.n	800331a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff f806 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 80032a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	005a      	lsls	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	61bb      	str	r3, [r7, #24]
        break;
 80032c2:	e02a      	b.n	800331a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085a      	lsrs	r2, r3, #1
 80032ca:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <UART_SetConfig+0x54c>)
 80032cc:	4413      	add	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e01e      	b.n	800331a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032dc:	f7fe ff18 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80032e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	005a      	lsls	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	61bb      	str	r3, [r7, #24]
        break;
 80032fa:	e00e      	b.n	800331a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	61bb      	str	r3, [r7, #24]
        break;
 8003312:	e002      	b.n	800331a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
        break;
 8003318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d916      	bls.n	800334e <UART_SetConfig+0x452>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d212      	bcs.n	800334e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f023 030f 	bic.w	r3, r3, #15
 8003330:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b29a      	uxth	r2, r3
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	4313      	orrs	r3, r2
 8003342:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	897a      	ldrh	r2, [r7, #10]
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	e070      	b.n	8003430 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
 8003352:	e06d      	b.n	8003430 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003354:	7ffb      	ldrb	r3, [r7, #31]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d859      	bhi.n	800340e <UART_SetConfig+0x512>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x464>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003385 	.word	0x08003385
 8003364:	080033a3 	.word	0x080033a3
 8003368:	080033c1 	.word	0x080033c1
 800336c:	0800340f 	.word	0x0800340f
 8003370:	080033d9 	.word	0x080033d9
 8003374:	0800340f 	.word	0x0800340f
 8003378:	0800340f 	.word	0x0800340f
 800337c:	0800340f 	.word	0x0800340f
 8003380:	080033f7 	.word	0x080033f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe ff82 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003388:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	085a      	lsrs	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	441a      	add	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	b29b      	uxth	r3, r3
 800339e:	61bb      	str	r3, [r7, #24]
        break;
 80033a0:	e038      	b.n	8003414 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a2:	f7fe ff87 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 80033a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	085a      	lsrs	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	61bb      	str	r3, [r7, #24]
        break;
 80033be:	e029      	b.n	8003414 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	085a      	lsrs	r2, r3, #1
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <UART_SetConfig+0x550>)
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6852      	ldr	r2, [r2, #4]
 80033ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	61bb      	str	r3, [r7, #24]
        break;
 80033d6:	e01d      	b.n	8003414 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d8:	f7fe fe9a 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80033dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085a      	lsrs	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e00e      	b.n	8003414 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	b29b      	uxth	r3, r3
 800340a:	61bb      	str	r3, [r7, #24]
        break;
 800340c:	e002      	b.n	8003414 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
        break;
 8003412:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d908      	bls.n	800342c <UART_SetConfig+0x530>
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d204      	bcs.n	800342c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e001      	b.n	8003430 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	01e84800 	.word	0x01e84800
 800344c:	00f42400 	.word	0x00f42400

08003450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354e:	d10a      	bne.n	8003566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035a2:	f7fd febf 	bl	8001324 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10e      	bne.n	80035d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f814 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e00a      	b.n	80035ea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	e05d      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360a:	d059      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fd fe8a 	bl	8001324 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <UART_WaitOnFlagUntilTimeout+0x30>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11b      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003630:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e042      	b.n	80036e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02b      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d123      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003680:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003690:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e00f      	b.n	80036e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d092      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff fbce 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff fbab 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003794:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379a:	2b22      	cmp	r3, #34	; 0x22
 800379c:	d13a      	bne.n	8003814 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037a6:	89bb      	ldrh	r3, [r7, #12]
 80037a8:	b2d9      	uxtb	r1, r3
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	400a      	ands	r2, r1
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d121      	bne.n	8003824 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fd f951 	bl	8000ab4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003812:	e007      	b.n	8003824 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0208 	orr.w	r2, r2, #8
 8003822:	619a      	str	r2, [r3, #24]
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800383a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003840:	2b22      	cmp	r3, #34	; 0x22
 8003842:	d13a      	bne.n	80038ba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003852:	89ba      	ldrh	r2, [r7, #12]
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	4013      	ands	r3, r2
 8003858:	b29a      	uxth	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003894:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd f8fe 	bl	8000ab4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038b8:	e007      	b.n	80038ca <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0208 	orr.w	r2, r2, #8
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4e0d      	ldr	r6, [pc, #52]	; (800390c <__libc_init_array+0x38>)
 80038d8:	4c0d      	ldr	r4, [pc, #52]	; (8003910 <__libc_init_array+0x3c>)
 80038da:	1ba4      	subs	r4, r4, r6
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	2500      	movs	r5, #0
 80038e0:	42a5      	cmp	r5, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	4e0b      	ldr	r6, [pc, #44]	; (8003914 <__libc_init_array+0x40>)
 80038e6:	4c0c      	ldr	r4, [pc, #48]	; (8003918 <__libc_init_array+0x44>)
 80038e8:	f000 f820 	bl	800392c <_init>
 80038ec:	1ba4      	subs	r4, r4, r6
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	2500      	movs	r5, #0
 80038f2:	42a5      	cmp	r5, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038fc:	4798      	blx	r3
 80038fe:	3501      	adds	r5, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003906:	4798      	blx	r3
 8003908:	3501      	adds	r5, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	08003964 	.word	0x08003964
 8003910:	08003964 	.word	0x08003964
 8003914:	08003964 	.word	0x08003964
 8003918:	08003968 	.word	0x08003968

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
